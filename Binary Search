Fill in the blank
Send Feedback
The array must be ____ before applying binary search on an array.
Note:- Don't use uppercase letters
Answer
sorted
Correct Answer
Solution Description
We can only apply Binary search on a sorted array because we need to know in which direction we have to go after every comparison.


Search in Rotated Sorted Array
Send Feedback
Aahad and Harshit always have fun by solving problems. Harshit took a sorted array consisting of distinct integers and rotated it clockwise by an unknown amount. For example, he took a sorted array = [1, 2, 3, 4, 5] and if he rotates it by 2, then the array becomes: [4, 5, 1, 2, 3].
After rotating a sorted array, Aahad needs to answer Q queries asked by Harshit, each of them is described by one integer Q[i]. which Harshit wanted him to search in the array. For each query, if he found it, he had to shout the index of the number, otherwise, he had to shout -1.
For each query, you have to complete the given method where 'key' denotes Q[i]. If the key exists in the array, return the index of the 'key', otherwise, return -1.
Note:
Can you solve each query in O(logN) ?
Input Format:
The first line of input contains the size of the array: N

The second line contains N single space-separated integers: A[i].

The third line of input contains the number of queries: Q

The next Q lines of input contain: the number which Harshit wants Aahad to search: Q[i]
Output Format:
For each test case, print the index of the number if found, otherwise -1.

Output for every test case will be printed in a separate line.
Note:
You are not required to explicitly print the expected output, just return it and printing has already been taken care of.
Constraints:
1 <= N <= 10^6
-10^9 <= A[i] <= 10^9
1 <= Q <= 10^5
-10^9 <= Q[i] <= 10^9

Time Limit: 1sec
Sample Input 1:
4
2 5 -3 0
2
5
1
Sample Output 1:
1
-1
Explanation For Sample Input 1:
In the 1st test case, 5 is found at index 1

In the 2nd test case, 1 is not found in the array, hence return -1.
Sample Input 2:
5
100 -2 6 10 11
2
100
6
Sample Output 2:
0
2

/*
    Time complexity : O(log(N))
    Space complextiy : O(1)

    where N is the size of the input array
*/

int search(int* arr, int n, int key)
{
    
    // Initialize start and end
    int st = 0, end = n - 1;

    // Performing binary search
    while (st <= end)
    {
        
        // Get the middle element
        int mid = st + (end - st) / 2;

        // The middle element is the one we are searching for
        if (arr[mid] == key)
        {
            return mid;
        }
        else if (arr[mid] >= arr[st])
        {
            
            // Element lies towards left of mid
            if (arr[st] <= key && key <= arr[mid])
            {
                end = mid - 1;
            }
            
            // Element lies towards right of mid    
            else
            {
                st = mid + 1;
            }
        }
        
        else
        {
            
            // Element lies towards right of mid
            if (arr[end] >= key && key >= arr[mid])
            {
                st = mid + 1;
            }
            
            // Element lies towards left of mid
            else
            {
                end = mid - 1;
            }
        }
    }
    
    // Element not found
    return -1;
}



Complete the code
Send Feedback
Find the missing statements I and II in the following code of binary search.
 bool binary_search(int nums[],int x){
 int  l=0,r=nums.length();
 while(l<=r){
       int mid=(l+r)/2;
       if(nums[mid]==x)return true;
       if(nums[mid]>x){
         //Statement I
        }
       else if(nums[mid]<x){
          //Statement II
         }
 }
 return false;
}

Options
This problem has only one correct answer
Statement 1 : l = mid – 1; Statement 2 : r = mid + 1;
Statement 1 : r = mid –1; Statement 2 : l = mid + 1; - Answer
Statement 1 : l = mid + 1; Statement 2 : r = mid –1;
Statement 1 : r = mid + 1; Statement 2 : l = mid - 1;
Hurray! Correct Answer
Solution Description
 If (nums[mid] > x), it means our answer lies between l and mid - 1. Therefore, we can ignore the rest of the elements, therefore we can equate r to mid - 1.

If(nums[mid] < x) it means that our answer lies between mid + 1 and r. Therefore, we can ignore the rest of the elements and equate l to mid + 1.





Aggressive Cows
Send Feedback
You are given an array consisting of 'N' integers which denote the position of a stall. You are also given an integer 'K' which denotes the number of aggressive cows. You are given the task of assigning stalls to 'K' cows such that the minimum distance between any two of them is the maximum possible.
Input format :
The first line contains two integers ‘N’ and ‘K’ denoting the number of elements in the array and the number of aggressive cows.

The second line contains ‘N’ single space-separated integers denoting the position of the stalls.
Output format :
Return the largest possible minimum distance between cows.
Note :
You do not need to print anything; it has already been taken care of.
Constraints :
2 <= N <= 20000
2 <= C <= N
0 <= ARR[i] <= 10 ^ 9

Time Limit: 1 sec.
Sample Input 1 :
3 2
1 2 3
Sample Output 1 :
2
Explanation to Sample Input 1 :
The largest minimum distance will be 2 when 2 cows are placed at positions {1, 3}.
Sample Input 2 :
6 4
0 3 4 7 10 9
Sample Output 2 :
3
Explanation to Sample Input 2 :
The largest minimum distance will be 3 when 4 cows are placed at positions {0, 3, 7, 10}.
Sample Input 3 :
5 2
4 2 1 3 6
Sample Output 3 :
5

/*
    Time Complexity = O(N * log(N))
    Space Complexity = O(log(N))
    
    Where N is the number of elements in the given array/list.
*/

//    check if a distance of x is possible b/w each cow
bool check(int x, int k, vector<int> &stalls)
{
    //    Greedy approach, put each cow in the first place you can.
    int cowsPlaced = 1, lastPos = stalls[0];

    int n = stalls.size();
	
    // Traverse through the array stalls
    for (int i = 1; i < n; i++)
    {
        if ((stalls[i] - lastPos) >= x)
        {
            cowsPlaced = cowsPlaced + 1;

            if (cowsPlaced == k)
            {
                return true;
            }

            //    Assign current position of stall as the lastPos.
            lastPos = stalls[i];
        }
    }

    return false;
}

int aggressiveCows(vector<int> &stalls, int k)
{
    sort(stalls.begin(), stalls.end());

    //    binary search
    long long int low = 0, high = 1000000000, mid, pos = 0;

    while (high >= low)
    {
        mid = (high + low) / 2;

        if (check(mid, k, stalls))
        {
            low = mid + 1;
            pos = mid;
        }
        else
        {
            high = mid - 1;
        }
    }

    return pos;
}




Collecting the Balls
Send Feedback
There are ‘n’ number of balls in a container. Mr. Sharma and Singh want to take balls out from the container. At each step, Mr. Sharma took ‘k’ balls out of the box and Mr. Singh took one-tenth of the remaining balls. Suppose there are 29 balls at the moment and k=4. Then, Mr. Sharma will take 4 balls and Mr. Singh will take 2 balls (29-4 = 25; 25/10 = 2). If there are less than ‘k’ balls remaining at some moment, then Mr. Sharma will take all the balls which will get the container empty. The process will last until the container becomes empty. Your task is to choose minimal ‘k’ for Mr. Sharma such that Mr. Sharma will take at least half of the balls from the container.
Input Format:
The first line of input will contain T (number of test cases).
The next n lines of input contain a single integer ‘n’.
Output Format:
For every test case print a single integer denoting the minimal value of ‘k’ in a newline.
Constraints:
1 <= T <= 10^4
1 <= n <= 10^18
Time Limit: 1 second
Sample Input:
1
68
Sample Output:
3
Explanation:
68-3 = 65; 65/10 = 6; 65-6 = 59
59-3 = 56; 56/10 = 5; 56-5 = 51
51-3 = 48; 48/10 = 4; 48-4 = 44
44-3 = 41; 41/10 = 4; 41-4 = 37
…..
…..
…..
6-3 = 3; 3/10 = 0; 3-0 = 3
3-3 = 0; 0/10 = 0; 0-0 = 0

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define double long double

bool check(const int& k, const int& n) {
	int sharma = 0, singh = 0;

	int x = n, step = 1;
	while(x) {

		sharma += min(k, x);
		x -= min(k, x);


		singh -= (x / 10);
		x -= (x / 10);
	}
	return (2*sharma >= n);
}

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

	int t; cin >> t;
	while(t--)
	{
		int n; cin >> n;

		int ans = n;

		int left = 1, right = n;
		while(left <= right) {
			int mid = left + (right - left) / 2;
			if(check(mid, n)) {
				ans = mid;
				right = mid - 1;
			}
			else {
				left = mid + 1;
			}
		}
		cout << ans << '\n';
	}
	return 0;
}


https://codeforces.com/problemset/problem/1462/F



Computer game
Send Feedback
You’re playing a guessing game with the computer in which the computer first chooses a number between 1 to 64 without telling you. You have to guess/determine the pre-chosen number. After every guess, the computer tells you if your number is greater than, equal to, or smaller than the pre-chosen number. The game will continue until you determine the number. What would be the minimum number of guesses in the worst-case scenario that you would need to make to determine the number correctly?
Options
This problem has only one correct answer
64
63
6 - Answer
1
Hurray! Correct Answer
Solution Description
We can follow the binary search algorithm to guess the pre-chosen number. The binary search takes log̣2(n) steps in worst case. Here n = 64, therefore the answer is log(2^6) = 6.



https://www.spoj.com/problems/EKO/cstart=40




Recycling Pens
Send Feedback
You have 'N' empty pens whose refills have been used up. You have 'R' rupees in your pocket. You have two choices of operations that you can perform each time.
1) Recycle 1 empty pen and get 'K' rupees as a reward.
2) Buy 1 refill for 'C' rupees and combine it with 1 empty pen to make one usable pen.
Your task is to find the maximum number of usable pens that you can get.
For example if you have 'N' = 5 , 'R' = 10 , 'K' = 2 , 'C' = 3. You can recycle one pen and get 2 rupees as a reward so you will have a total of 12 rupees. Now you can buy 4 refills and combine it with 4 pens to make it usable. So your answer is 4.
Input Format :
The first line of the input contains a single integer 'T', denoting the number of test cases. Then the 'T' test case follows.

The first and the only line of each test case consists of 4 non-negative integers 'N', 'R', 'K' and 'C', as described in the problem statement.
Output Format :
For each test case, print a single integer in a new line, denoting the maximum number of usable pens you can get.
Note:
You do not need to print anything. It has already been taken care of. Just implement the given function.
Constraints :
1 <= T <= 10^5
1 <= N <= 10^9
0 <= R <= 10^9
1 <= K <= 10^9
1 <= C <= 10^9

Time limit: 1 sec
Sample Input 1 :
3
10 10 5 5
15 11 3 5
3 20 20 2
Sample Output 1 :
6
7
3
Explanation for Sample input 1 :
In the first test case, you will sell 4 empty pens and you will get 20 rupees so your total money will be 10+20 = 30 and from that, you will buy 6 refills and make 6 usable pens.

In second test case you will sell 8 pens and you will get 8*3=24 rupees and your total money will be 24+11 = 35 and from that, you will buy 7 refills and make 7 usable pens.

In this test case, you have a lot of money to buy but you have only 3 empty pens so you buy 3 refills for 6 rupees and make 3 usable pens.
Sample Input 2 :
3
10 10 1 10
5 0 5 5
6 0 4 2
Sample Output 4 :
1
2
4
Explanation of Sample Input 2 :
In the first test case you can buy 1 refill from the money you have and make 1 usable pen.

In the second test case you can sell 2 empty pens and get 10 rupees and from it, you can buy 2 refills and make 2 usable pens.

In the third test case you can sell 2 empty pens and get 8 rupees and from it, you can buy 4 refills and make 4 usable pens.



int recyclePens(int n, int r, int k, int c ) {

    
    int left = 0 , right = n , ans = 0;
    // We will do binary search between left to right.
    while (left <= right) {
        
        long long x = (left + right) / 2;
        long long recycleReward = (long long)(n - x) * k;
        long long totalMoney = r + recycleReward;
        long long penCost = (long long)c * x;
        
        if (totalMoney >= penCost) {
            ans = x;
            left = x + 1;
        }

        else {
            right = x - 1;
        }

    }

    // return the final answer.
    return ans;
}



Painter's Partition Problem
Send Feedback
Given an array/list of length ‘N’, where the array/list represents the boards and each element of the given array/list represents the length of each board. Some ‘K’ numbers of painters are available to paint these boards. Consider that each unit of a board takes 1 unit of time to paint.
You are supposed to return the area of the minimum time to get this job done of painting all the ‘N’ boards under a constraint that any painter will only paint the continuous sections of boards.
For example :
In the below figure where array/list elements are {2, 1, 5, 6, 2, 3}.
alt text

A painter can paint blocks {5,6} or {1,5,6,2} together but not {2,5,6} or {5,6,3}.
Input format :
The first line contains a single integer ‘T’ denoting the number of test cases.

The first line of each test case contains two integers ‘N’ and ‘K’ denoting the number of elements in the array/list and number of painters available.

The second line contains ‘N’ single space-separated integers denoting the elements of the array/list.
Output format :
For each test case, print the minimum time required to get the job done.
Note :
You do not need to print anything; it has already been taken care of.
Constraints :
1 <= T <= 5
1 <= N <= 10^4
1 <= K <= N
1 <= ARR[i] <= 10^5

Where ‘T’ is the number of test cases.
'N' is the length of the given array/list (boards).
‘K’ is the number of painters available.
And, ARR[i] denotes the i-th element in the array/list.

Time Limit: 1 sec.
Sample Input 1 :
2
4 2
5 5 5 5
4 2
10 20 30 40
Sample Output 1 :
10
60
Explanation For Sample Input 1 :
In the first test case, we can divide the boards into 2 equal-sized partitions, so each painter gets 10 units of the board and the total time taken is 10.


In the second test case, we can divide the first 3 boards for one painter and the last board for the second painter.
Sample Input 2 :
2
2 2
48 90
4 2
1 2 3 4
Sample Output 2 :
90
6

/*
    Time Complexity = O(K * (log(arrSum)))
    Space Complexity = O(1)

    Where N is the number of elements in the given array/list and arrSum is the sum of the array elements.
*/

#include <limits.h>

//    Return the maximum element from the array.
int findMax(vector<int> &boards, int n)
{
	int max = INT_MIN;

	for (int i = 0; i < n; i++)
	{
		if (boards[i] > max)
		{
			max = boards[i];
		}
	}

	return max;
}

//    Return the sum of the elements in the array.
int findSum(vector<int> &boards, int n)
{
	int total = 0;
	for (int i = 0; i < n; i++)
	{
		total += boards[i];
	}
	return total;
}

//    Find minimum required painters for given maxlen which is the maximum length a painter can paint.
int countPainters(vector<int> &boards, int maxLen)
{
	int n = boards.size(), totalSum = 0, painters = 1;

	for (int i = 0; i < n; i++)
	{
		totalSum += boards[i];

		if (totalSum > maxLen)
		{
			totalSum = boards[i];
			painters++;
		}
	}

	return painters;
}

int findLargestMinDistance(vector<int> &boards, int k)
{
	int n = boards.size();

	int low = findMax(boards, n);
	int high = findSum(boards, n);

	while (low < high)
	{
		int mid = low + (high - low) / 2;
		int reqPainters = countPainters(boards, mid);

		//    Find better optimum in lower half here mid is included because we may not get anything better.
		if (reqPainters <= k)
		{
			high = mid;
		}
		
		//    Find better optimum in upper half here mid is excluded because it gives required Painters > k, which is invalid.
		else
		{
			low = mid + 1;
		}
	}

	return low;
}


Ninja And Candies
Send Feedback
Ninja is a boy who lives in ninjaland. Every day, during the morning he gets 1 coin from his mother. He wants to buy exactly ‘N’ candies. Each of the candies cost 2 coins usually and 1 coin if it is on sale. Ninja has to buy exactly K[i] candies of the i-th type(he buys candies in the evening).
Ninjas can buy any(possibly zero) number of candies of any type during any day(if he has enough money to do it). If the candy is on sale he can buy it for 1 coin and otherwise he has to buy it for 2 coins.
There are ‘M’ special offers in the candy shop. The j-th offer (D[j], C[j]) means that candies of the C[j]-th type are on sale during the D[j]-th day.
Ninja wants to buy all candies as soon as possible. Your task is to calculate the minimum day when he can buy all the candies.
Input Format
The first line of input contains an integer ‘T’ denoting the number of test cases to run. Then the test cases follow.

The first line of each test case contains two space separated integers ‘N’ and ‘M’ denoting the total number of types of candies and the number of special offers in the candy shop.

The second line of each test case contains ‘N’ space-separated integers K[i], denoting the number of candies of each type Ninja has to order.

The next M-lines contain two space-separated integers (D[i], C[i]), denoting that the candy of C[i] type is on sale on the D[i]-th day.
Output Format :
For each query, print the minimum day when the Ninja can order all candies.

Output for each test case will be printed in a new line. 
Note:
You do not need to print anything; it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 10
1 <= N, M <= 10^4
0 <= K[i] <= 10^4
1 <= C[i] <= N
1 <= D[i] <= 10^4

Here N denotes the total number of candies and M denotes the total number of special offers.
Here K[i] denotes the number of candies of the i-th type Ninjas has to order.
Here C[i]  and D[i] denote that the candy if the C[i]-th type will be on sale on the D[i]-th day.
Sum of K[i]’s in each test case will be less than 5000.
Sample Input 1 :
2
4 4
1 0 2 0
1 1
1 3
2 1
2 3
3 3
1 1 1
1 1
1 2
1 3
Sample Output 1:
4
5
Explanation of Input 1:
For test case 1, Ninja can buy candies in the following manner-

• Buy candy of type 1 on day 1 for 1 coin.
• Buy candy of type 3 on day 2 for 1 coin.
• Buy candy of type 3 on day 4 for 2 coins.

For test case 2, Ninja can buy candies in the following manner-
• Buy candy of type 1 on day 1 for 1 coin.
• Buy candy of type 2 on day 3 for 2 coins.
• Buy candy of type 3 on day 5 for 2 coins.
Sample Input 2 :
1
5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3
Sample Output 2:
8



bool isPossible(int currDay, vector<int>& days, vector<int>& candies, int n, int m, vector<int>& k)
{

	vector<int> last(n + 1, -1);
	for(int i = 0; i < m; ++i) 
	{
		if (days[i] <= currDay) 
		{
			last[candies[i]] = max(last[candies[i]], days[i]);
		}
	}

	vector<vector<int>> lastDay(currDay +1);

	
	for(int i = 0; i < n; ++i) 
	{
		if (last[i+1] != -1) 
		{
			lastDay[last[i+1]].push_back(i);
		}
	}

	vector<int> need = k;

	int currMoney = 0;

	for(int i = 1; i <= currDay; ++i) 
	{
		currMoney++;

		for(int j = 0; j < lastDay[i].size(); j++) 
		{
			if (currMoney >= need[lastDay[i][j]]) 
			{
				currMoney -= need[lastDay[i][j]];
				need[lastDay[i][j]] = 0;
			} 
			else 
			{
				need[lastDay[i][j]] -= currMoney;
				currMoney = 0;
				break;
			}
		}
	}

	int sum = 0;

	for(int i = 0; i < n; i++)
	{
		sum += need[i];
	}

	return ((sum * 2) <= currMoney);
}

int minimumDays(vector<int>& days, vector<int>& candies, vector<int>& k, int n, int m)
{
	int high=0;

	for(int i = 0; i < n; i++)
	{
		high += k[i];
	}

	high*=2;

	if(high == 0)
	{
		return 0;
	}

	int low=1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(isPossible(mid, days, candies, n, m, k))
		{
			high = mid - 1;
		} 
		else
		{
			low = mid + 1;
		}
	}

	return high + 1;

}



Smart Intervals
Send Feedback
You are given an array of intervals, where intervals[i] = [start(i), end(i)] and each start(i) is unique.
The smart interval for an interval ‘i’ is an interval ‘j’ such that start(j) is greater than or equal to end(i) and start(j) should be minimum.
Your task is to return an array of smart interval indices for each interval. If no smart interval exists for an interval ‘i’, then place -1 at index ‘i’ in the output array.
Input Format:
The first line contains a single integer T representing the number of test cases.

The first line of the test case contains an integer ‘N’ denoting the number of intervals.

Each of the following ‘N’ lines contains 2 space-separated integers denoting the start and end of an interval. 
Output Format :
The first and only line of output contains ‘N’ space-separated integers as described above.

The output of every test case is printed in a separate line.
Note :
You do not need to print anything; it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 10
1 <= N <= 10^4
1 <= start, end <= 10^4

Time Limit : 1sec
Sample Input 1:
1
3
1 2
2 3
3 4
Sample output 1:
1 2 -1
Explanation of Sample output 1:
Smart interval for the interval [1, 2] is [2, 3] because the start point of [2, 3] is equal to the end point of [1, 2]. The index of [2, 3] is 1.
Smart interval for the interval [2, 3] is [3, 4] because the start point of [3, 4] is equal to the end point of [2, 3]. The index of [3, 4] is 2.
Smart interval for the interval [3, 4] does not exist. Hence, -1.
Therefore, the final answer is [1, 2, -1]. 
Sample Input2:
2
2
3 2
2 3
1 
1 1
Sample Output2:
1 0
0
Explanation of Sample output 2
Test Case 1:
Smart interval for the interval [3, 2] is [2, 3]. The index of [2, 3] is 1.
Smart interval for the interval [2, 3] is [3, 2]. The index of [3, 2] is 2. 
Hence, the answer is [1, 0]. 

Test Case 2: 
Do you really need an explanation? 

/*

	Time Complexity: O(N * log(N))
	Space Complexity: O(N)
	
	Where N is the number of intervals.

*/

#include<algorithm>

vector<int> smartInterval(vector<vector<int>> &intervals, int n)
{
	// Create two array of pairs
	vector<pair<int, int>>sortedStarts(n), sortedEnds(n);

	for(int i = 0; i < n; i++)
	{
		sortedStarts[i] = {intervals[i][0], i};
		sortedEnds[i] = {intervals[i][1], i};
	}

	// Sort the arrays
	sort(sortedStarts.begin(), sortedStarts.end());
	sort(sortedEnds.begin(), sortedEnds.end());

	// Output array
    vector<int>result(n, -1);

    int i = 0, j = 0;

    // Traverse through the arrays 
    while(i < n and j < n)
    {
    	// Smart interval is found
    	if(sortedStarts[i].first >= sortedEnds[j].first)
    	{
    		int index = sortedEnds[j].second;
    		result[index] = sortedStarts[i].second;
    		j++;
    	}
    	else
    	{
    		i++;
    	}
    }

    return result;  
}


Shopping Options
Send Feedback
You are given the list of costs of pants in an array “pants”, shirts in an array “shirts”, shoes in an array “shoes”, and skirts in an array “skirts”. You are also given a budget amount ‘X’ to spend. You want to buy exactly 1 item from each list. Your task is to determine the total number of possible combinations that you can buy, given that the total amount of your purchase does not exceed your budget amount.
Input Format:
The first line of input contains an integer ‘T’ denoting the number of test cases to run. Then the test case follows.

The first line of each test case contains five integers ‘P’, ‘Q’, ‘R’, ‘S’ and, ‘X’. Denotes the number of pants, shirts, shoes, skirts, and budget amount respectively.

The second line of each test case contains exactly ‘P’ integers. Denotes the cost of each pant.

The third line of each test case contains exactly ‘Q’ integers. Denotes the cost of each shirt.

The fourth line of each test case contains exactly ‘R’ integers. Denotes the cost of each shoe.

The fifth line of each test case contains exactly ‘S’ integers. Denotes the cost of each skirt.
Output Format :
For each test case, return an integer that represents the total number of combinations to buy that are valid according to the above conditions.

Output for each test case will be printed in a new line. 
Note:
You do not need to print anything; it has already been taken care of. Just implement the given functions.
Constraints:
1 <= T <= 100
1 <= ‘P’, ‘Q’, ‘R’, ‘S’  <= 10
1 <= ‘X’ <= 10^9
1 <= pants[i], shirts[i], shoes[i], skirts[i] <= 10^9

Time Limit: 1 sec
Sample Input 1:
2
2 2 1 1 10
3 4
2 4
2
1
3 2 2 1 15
3 4 6
1 4
2 3
8
Sample Output 1:
3
3
Explanation For Sample Output 1:
In the first case, 
There are a total of four ways to buy. Only valid purchases are [3, 2, 2, 1], [3, 4, 2, 1], [4, 2, 2, 1] because the sum of the cost of each item of each valid purchase is less than the budget amount.

In the second case, 
There are a total of four ways to buy. Only valid purchases are [3, 1, 2, 8], [3, 1, 3, 8], [4, 1, 2, 8] because the sum of the cost of each item of each valid purchase is less than the budget amount.
Sample Input 2 :
2
3 3 3 3 14
3 4 7
1 3 5 
6 8 10
1 2 3
4 3 2 2 20
2 8 7 10
5 5 5
6 3
4 5
Sample Output 2:
12
21

/*
    Time Complexity: O((R * S + P * Q) * log(P * Q))
    Space Complexity: O(P * Q)

    Where ‘P’, ‘Q’, ‘R’, and ‘S’ denote the number of pants, shirts, shoes, skirts respectively.

*/

#include<algorithm>

// To find number of smaller values in an array than the given value.
int getSmallerNumbers(vector<int> vec, int val)
{
	int left = 0, right = vec.size();

	while (left < right)
	{
		int mid = (left + right) / 2;

		if (vec[mid] <= val)
		{
			left = mid + 1;
		}
		else
		{
			right = mid;
		}
	}

	return left;
}

int shoppingOptions(vector<int>& pants, vector<int>& shirts, vector<int>& shoes, vector<int>& skirts, int budget)
{

	//To store number of ways to buy
	int answer = 0;

	vector<int> sumOfPantsAndShirts((int)(pants.size() * shirts.size()));

	int counter = 0;

	// To generate every possible combinations of pants and shirts.
	for (int i = 0; i < pants.size(); i++)
	{
		for (int j = 0; j < shirts.size(); j++)
		{
			// Store the sum in the array
			sumOfPantsAndShirts[counter] = pants[i] + shirts[j];

			counter = counter + 1;
		}
	}

	// Sort all the combinations in ascending order.
	sort(sumOfPantsAndShirts.begin(), sumOfPantsAndShirts.end());


	for (int i = 0; i < shoes.size(); i++)
	{
		for (int j = 0; j < skirts.size(); j++)
		{
			// To store remaining amount
			int remainingAmount = budget - shoes[i] - skirts[j];

			// Adding all smaller or equal numbers than remainingAmount.
			answer = answer + getSmallerNumbers(sumOfPantsAndShirts, remainingAmount);
		}
	}

	return answer;
}



Russian Doll Envelopes
Send Feedback
You are given a set of ‘N’ rectangular envelopes. The height and width of each envelope are given by arrays, ‘height’ and ‘width’ respectively, each consisting of ‘N’ positive integers. The height, width of the ith envelope is given by ‘height[i]’ and ‘width[i]’ respectively.
You can put one envelope inside another envelope if and only if both the height and width of one envelope is strictly greater than the height and width of the other envelope.
What is the maximum number of envelopes you can Russian doll? (put one inside other)
Note
Rotation of envelope is not allowed, that is, height and width can’t be exchanged
Input Format:
The first line of input contains an integer ‘T’ denoting the number of test cases.

The next 3*T lines represent the ‘T’ test cases.

The first line of each test case contains an integer ‘N’, representing the number of envelopes.

The second line of the test case contains ‘N’ space-separated integers representing elements of the array ‘height’.

The third line of the test case contains ‘N’ space-separated integers representing elements of the array ‘width’.
Output Format :
For each test case, print, in a separate line, the maximum number of envelopes you can Russian doll.
Note:
You do not need to print anything, it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 50
1 <= n <= 10^4
1 <= height[i] <= 10^9
1 <= width[i] <= 10^9

Time Limit: 2 sec
Sample Input 1:
2
4
5 6 6 2
4 4 7 3
2
2 1 
2 1
Sample Output 1:
3 
2
Explanation For Sample Output 1:
Test Case 1:
The number envelopes, ‘N’ = 4 
‘height’ = {5, 6, 6, 2}
‘width’= {4, 4, 7, 3}
Let denote dimensions of the envelope in (Height, Width) manner then, one way of Russian Doll envelopes in outermost to the innermost manner is as follow:

Select the third envelope, i.e., envelope with dimensions (6, 7) as the outermost envelope.

Place the first envelope i.e envelope with dimensions (5, 4) inside the outermost envelope. You can do this because both the height and width of this envelope is strictly less than the outermost envelope.

Place the fourth envelope i.e envelope with dimensions (2, 3) inside the previous envelope.

In this way, we can Russian Doll 3 envelopes. 

No other way can Russian Doll more than 3 envelopes.

Test Case 2:
You can put the second envelope inside the first envelope because both the height and width of the second envelope are strictly less than the first envelope.
Sample Input 2:
 2
 1
 2
 3
 3
 1 1 1
 1 1 1
Sample Output 2:
 1
 1
 
 /*
    Time Complexity     :   O(N * log(N))
    Space Complexity    :   O(N)

    Where 'N' is the number of envelopes.
*/

#include <algorithm>
#include <climits>

int longestIncreasingSubsequence(vector<int> &arr, int n) {

    // Here tail[i] will be last element of incresing sequence of length 'i'.
    vector<int> tail(n);
    
    tail[0] = arr[0];
    int length = 1;
    
    for(int i = 1; i < n; i++) {
    
        // Binary search to find position in 'tail' array.
        int j = lower_bound(tail.begin(), tail.begin() + length, arr[i]) - tail.begin();
        
        if(j == length) {
            tail[length++] = arr[i];
        }
        else {
            tail[j] = arr[i];
        }
    }

    return length;
}

int findMaxEnvelopes(vector<int> &height, vector<int> &width, int n) {
    
    // Store height and width of each envelop in matrix 'envelopes'.
    vector<vector<int>> envelopes(n, vector<int>(2));
    for(int i = 0; i < n; i++) {
        envelopes[i][0] = height[i];
        envelopes[i][1] = width[i];
    }

    // Sort matrix 'envelopes' in increasing order of their height and if height are equal then arrange in decreasing order of width.
    sort(envelopes.begin(), envelopes.end(), [](vector<int> &v1, vector<int> &v2)->bool{
        if(v1[0] < v2[0] or (v1[0] == v2[0] and v1[1] > v2[1])) {
            return true;
        }
        return false;
    });

    // Copy second column of matrix 'envelopes' after sorting.
    vector<int> arr(n);
    for(int i = 0; i < n; i++) {
        arr[i] = envelopes[i][1];
    }

    return longestIncreasingSubsequence(arr, n);
}







