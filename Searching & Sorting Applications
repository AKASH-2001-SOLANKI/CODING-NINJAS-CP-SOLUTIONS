Aggressive Cows Problem
Send Feedback
Farmer John has built a new long barn, with N (2 <= N <= 100,000) stalls. The stalls are located along a straight line at positions x1,...,xN (0 <= xi <= 1,000,000,000).
His C (2 <= C <= N) cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, FJ wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?
Input Format:
The first line of input contains number of test cases, which will be denoted by the symbol t. In the following lines, the t test cases are written.
The first line of each of the test cases contain two space separated integers: N and C. The following line contains N space separated integers, where the ith integer denote the position of ith stall. 
It is given that sum of N over all the test cases doesn't exceed 1000, 000.   
Output Format:
As described in the problem statement, the first and only line of output will print the largest minimum distance possible. 
The output for each test case will be printed on a separate line. 
Sample Input 1:
2
11 3
15 5 2 4 17 16 12 8 19 18 11 
15 13
20 8 16 3 13 9 11 10 15 17 18 14 1 2 5 
Sample Output 1:
8
1

#include<bits/stdc++.h>
using namespace std;

bool check(int cows,  long long int positions[], int n , long long distance)
{
    int count = 1;
    long long last_position = positions[0];
    for(int i = 1 ; i < n ; i++)
    {
        if(positions[i] - last_position >= distance )
        {
            last_position = positions[i];
            count++;
        }
        if(count == cows)
        {
            return true;
        }
    }
    return false;
}
    
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n, c;
        cin >> n >> c;
        long long  positions[n];
        for(int i = 0 ; i < n ; i++)
        {
            cin >> positions[i];
        }
        sort(positions, positions + n);
        long long start = 0;
        long long end = positions[n - 1] - positions[0];
        
        long long ans = -1;
        
        while(start <= end)
        {
            long long mid = start + (end - start)/2;
            if(check(c,positions, n , mid))
            {
                ans = mid;
                start = mid + 1;
                
            }
            else
            {
                end = mid - 1;
            }
        }    
        cout << ans << endl;
        
    }
}    


Inversion Count
Send Feedback
For a given integer array/list 'ARR' of size 'N' containing all distinct values, find the total number of 'Inversions' that may exist.
An inversion is defined for a pair of integers in the array/list when the following two conditions are met.
A pair ('ARR[i]', 'ARR[j]') is said to be an inversion when:

1. 'ARR[i] > 'ARR[j]' 
2. 'i' < 'j'

Where 'i' and 'j' denote the indices ranging from [0, 'N').
Input format :
The first line of input contains an integer 'N', denoting the size of the array.

The second line of input contains 'N' integers separated by a single space, denoting the elements of the array 'ARR'.
Output format :
Print a single line containing a single integer that denotes the total count of inversions in the input array.
Note:
You are not required to print anything, it has been already taken care of. Just implement the given function.  
Constraints :
1 <= N <= 10^5 
1 <= ARR[i] <= 10^9

Where 'ARR[i]' denotes the array element at 'ith' index.

Time Limit: 1 sec
Sample Input 1 :
3
3 2 1
Sample Output 1 :
3
Explanation of Sample Output 1:
We have a total of 3 pairs which satisfy the condition of inversion. (3, 2), (2, 1) and (3, 1).
Sample Input 2 :
5
2 5 1 3 4
Sample Output 2 :
4
Explanation of Sample Output 1:
We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).

/*
    Time Complexity : O(N*log(N))
    Space Complexity : O(N)

    Where, N is the size of the array.
*/

#include <vector>
#include <algorithm>
void fenwickUpdate(int index, int siz, vector<long long> &fenwick)
{
    while (index <= siz)
    {
        // Update the current element in the fenwick vector.
        fenwick[index] += 1;

        // Increase the index to the child index in the fenwick tree.
        index = index + (index & (-index));
    }
}
long long fenwickSum(int index, vector<long long> &fenwick)
{
    long long sum = 0;
    while (index > 0)
    {

        // Add the value of current node in sum.
        sum += fenwick[index];

        // Move to the parent node of the current node.
        index = index - (index & (-index));
    }
    return sum;
}

long long getInversions(long long *arr, int n) {

    // Take a 2D vector to store the sorted array and their initial index.
    vector<vector<int>> mapping(n, vector<int>(2));

    vector<long long> fenwick(n + 1, 0), mask(n);

    for (int i = 0; i < n; i++) {
        mapping[i][0] = arr[i];
        mapping[i][1] = i;
    }

    // Sort the mapping array and update all the permutations to mask vector.
    sort(mapping.begin(), mapping.end());
    for (int i = 0; i < n; i++) {
        mask[mapping[i][1]] = i + 1;
    }

    long long answer = 0;
    for (int i = n - 1; i >= 0; i--) {

        // Calculate the number of elements greater than the current element.
        answer += fenwickSum(mask[i] - 1, fenwick);

        // Update the element that has been visited.
        fenwickUpdate(mask[i], n, fenwick);
    }
    return answer;
}



https://www.codechef.com/problems/CHEFRES
https://www.codechef.com/ZCOPRAC/problems/ZCO15002


Murder
Send Feedback
Once detective Saikat was solving a murder case. While going to the crime scene he took the stairs and saw that a number is written on every stair. He found it suspicious and decides to remember all the numbers that he has seen till now. While remembering the numbers he found that he can find some pattern in those numbers. So he decides that for each number on the stairs he will note down the sum of all the numbers previously seen on the stairs which are smaller than the present number. Calculate the sum of all the numbers written on his notes diary.
Answer may not fit in integer . You have to take long.
Input Format:
First line of input contains an integer T, representing number of test case.
For each test case, first line of input contains integer N, representing the number of stairs.
For each test case, second line of input contains N space separated integers, representing numbers written on the stairs.
Constraints
T<=10^5
1<=N<=10^5
All numbers will be between 0 and 10^9
Sum of N over all test cases doesn't exceed 5*10^5
Output Format
For each test case output one line giving the final sum for each test case.
Sample Input 1:
1
5
1 5 3 6 4
Sample Output 1:
15
Explanation:
For the first number, the contribution to the sum is 0.
For the second number, the contribution to the sum is 1.
For the third number, the contribution to the sum is 1.
For the fourth number, the contribution to the sum is 9 (1+5+3).
For the fifth number, the contribution to the sum is 4 (1+3).
Hence the sum is 15 (0+1+1+9+4).

#include <stdio.h>

long long int count;

void merge(long long int *a, int low,long long int mid,long long int high)
{
    int b[1000010];
    long long int i = low, j = mid + 1, k = 0;
    long long int length = high - mid;
  
    while (i <= mid && j <= high) 
    {
        if (a[i] < a[j])
        {
            b[k++] = a[i];
            count += (a[i] * length);
            i++; 
        }
        else
        {
            b[k++] = a[j++];
            length--;
        }
    }
    while (i <= mid)
        b[k++] = a[i++];
  
    while (j <= high)
        b[k++] = a[j++];
  
    k--;
    while (k >= 0) 
    {
        a[low + k] = b[k];
        k--;
    }
}
  
void mergesort(long long int *a,long long int low,long long int high)
{
    if (low < high) 
    {
        int m = (high + low)/2;
        mergesort(a, low, m);
        mergesort(a, m + 1, high);
        merge(a, low, m, high);
    }
}

int main()
{
    int testCases;
    long long int arr[1000010], i , n;

    scanf("%d",&testCases);

    while(testCases--)
    {
        scanf("%lld",&n);

        for(i = 0 ; i < n ; i++)
            scanf("%lld",&arr[i]);

        count = 0;
        mergesort(arr, 0 , n - 1);

        printf("%lld\n", count);
    }

    return 0;
}




Distribute Candies
Send Feedback
Shaky has N (1<=N<=50000) candy boxes each of them contains a non-zero number of candies (between 1 and 1000000000). Shaky want to distribute these candies among his K (1<=K<=1000000000) IIIT-Delhi students. He wants to distribute them in a way such that:
1. All students get an equal number of candies.
2. All the candies which a student gets must be from a single box only.
As he wants to make all of them happy so he wants to give as many candies as possible. Help Shaky in finding out what is the maximum number of candies which a student can get.
Input
First-line contains T the number of test cases. 
The first line of each test case contains N and K.
Next line contains N space-separated integers, ith of which is the number of candies in the ith box.
Output
For each test case print the required answer in a separate line.
Constraints
1<= T <= 10^5
1 <= N <= 10^5
1 <= K <= 10^9
0 <= A[i] <= 10^9
Sum of N over all test cases doesn't exceed 10^6
Sample Input:
2
3 2 
3 1 4
4 1
3 2 3 9
Sample Output:
3
9

#include<iostream>
#include<vector>
#include<string>
#include<utility>
#include<set>
#include<math.h>
#include<unordered_map>
#include<algorithm>
#include<climits>
#define ll long long int
#define MAX 1000000000
using namespace std;

bool isPossible(ll candies, ll arr[], ll total, ll n) {
  for(ll i = 0; i < n; i++) {
    total -= (arr[i] / candies);
  }
  if(total <= 0) 
    return true;
  return false;
}

int main() {
  ll tc, arr[50001];
  cin >> tc;
  
  while(tc--) {
    ll n, k;
    cin >> n >> k;
    
    for(ll i = 0; i < n; i++) {
      cin >> arr[i];
    }
    
    ll start = 1, end = MAX, maxm = LLONG_MIN;
    while(start <= end) {
      ll mid = (start + end) / 2;
      if(isPossible(mid, arr, k, n)) {
        maxm = maxm < mid ? mid : maxm;
        start = mid + 1;
      }
      else {
        end = mid - 1;
      }
    }
    maxm = maxm == LLONG_MIN ? 0 : maxm;
    cout << maxm << endl;
  }
}



Momos Market
Send Feedback
Shreya loves to eat momos. Her mother gives her money to buy vegetables but she manages to save some money out of it daily. After buying vegetables, she goes to "Momos Market", where there are ‘n’ number of shops of momos. Each of the shops of momos has a rate per momo. She visits the market and starts buying momos (one from each shop) starting from the first shop. She will visit the market for ‘q’ days. You have to tell that how many momos she can buy each day if she starts buying from the first shop daily. She cannot use the remaining money of one day on some other day. But she will save them for other expenses in the future, so, you also need to tell the sum of money left with her at the end of each day.
Input Format:
First-line will have an integer ‘n’ denoting the number of shops in the market.
The next line will have ‘n’ numbers denoting the price of one momo of each shop.
The next line will have an integer ‘q’ denoting the number of days she will visit the market.
Next ‘q’ lines will have one integer ‘X’ denoting the money she saved after buying vegetables.
Constraints:
1 <= n <= 10^5
1 <= q <= 10^4
1 <= X <= 10^9
1 <= rate per momo <=10^9 (for each shop)
Output:
There will be ‘q’ lines of output each having two space separated integers denoting number of momos she can buy and amount of money she saved each day.
Sample Input:
4
2 1 6 3
1
11
Sample Output:
3 2
Explanation:
Shreya visits the "Momos Market" for only one day. She has 11 INR to spend. She can buy 3 momos, each from the first 3 shops. She would 9 INR (2 + 1 + 6) for the same and hence, she will save 2 INR.

#include<bits/stdc++.h>
using namespace std;
int main() {


        int n;
        int q;
        cin>>q;
        long long rates[q];
        cin>>rates[0];
        for(int i=1;i<q;i++)
        {
            cin>>rates[i];
            rates[i]=rates[i]+rates[i-1];
        }
        cin>>n;
        long long arr[n];
        
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        for(int i=0;i<n;i++)
        {
            
        long long end=q-1;
        long long start=0;
        long long ans=0;
        long long left_over=0;
            if(rates[q-1]<=arr[i])
            {
                ans=q;
                left_over=arr[i]-rates[q-1];
            }
            else
            {
                while(start<=end)
                {
                    long long mid=start+(end-start)/2;
                    // if(rates[mid+1]>=arr[i] && rates[mid]<=arr[i])
                    // {
                    //     ans=mid+1;
                    //     left_over=rates[mid];
                    //     break;
                    // }
                    if(rates[mid]<=arr[i])
                    {
                        ans = mid + 1;
                        left_over = arr[i] - rates[mid];
                        start=mid+1;
                    }
                    else
                    {
                        end=mid-1;
                    }
                }
            }
            cout<<ans<<" "<<left_over<<endl;
        }
    }
    
    
    Taj Mahal Entry
Send Feedback
Taj Mahal is one of the seven wonders of the world. Aahad loves to travel places and wants to visit Taj Mahal. He visited Agra to view Taj Mahal. There is a ticketing system at Taj Mahal. There are total ‘n’ windows which provide the tickets to get entry into Taj Mahal. There are ‘Ai’ people already present at each window to get the tickets. Each window gives ticket to one person in one minute. Initially, Aahad stands in front of the first window. After each minute, if he didn’t get the ticket, he moves on to the next window to get the ticket. If he is at window 1, he will move to 2. If at 2nd, he will move to 3rd. If he is at last window, he will move to 1st again and so on. Find the window number at which he will get the ticket.
Input Format:
First line contains a single integer ‘n’ denoting the no. of windows.
Next line contains ‘n’ space separated integers denoting the no. of people already standing in front of the ith window. (1 <= i <= n)
Output Format:
Print a single integer denoting the window number that Aahad will get ticket from.
Constraints:
1 <= n <= 10^5
1 <= Ai <= 10^9
Sample Input:
4
2 3 2 0
Sample Output:
3
Explanation:
Aahad at Window 1: [2, 3, 2, 0]
Aahad at Window 2: [1, 2, 1, 0]
Aahad at Window 3: [0, 1, 0, 0]
So, when Aahad is at window 3, he got zero people before him. Hence, he will get the ticket at window 3.

#include <bits/stdc++.h>

using namespace std;

int go(vector<int> window, int min_index){
	int n = window.size();
	int pos = window.at(min_index)%n;
	int min_value = window.at(min_index);
	//cout << min_index << '\n';
	//cout << pos << '\n';

	if (pos==min_index)
	{
		return min_index;
	}

	int cycles = min_value/n;

	for (int i = pos; i < n+pos; ++i)
	{
		window.at(i%n) = window.at(i%n) - abs(i-pos)-cycles*n-min_value;
		if (window.at(i%n)<=0)
		{
			return i%n;
		}
	}

	return 0;

}


int main( int argc , char ** argv )
{
	ios_base::sync_with_stdio(false) ; 
	cin.tie(NULL) ;

	int n;
	cin>>n;
	//int m = n;
	int min_index= 0;
	int min_value = INT_MAX;
	int h = 0;

	std::vector<int> window;
	while(n--){
		int a;
		cin>>a;
		window.push_back(a);
		if (window.at(min_index)>window.at(h))
		{
			min_index = h;
			min_value = window.at(min_index);
		}
		h++;
	}

	cout << go(window, min_index)+1 << '\n';
	



	return 0 ; 



}




Sorting the Skills
Send Feedback
There is a company named James Peterson & Co. The company has ‘n’ employees. The employees have skills, which is denoted with help of an integer. The manager of James Peterson & Co. wants to sort the employees on the basis of their skills in ascending order. He is only allowed to swap two employees which are adjacent to each other. He is given the skills of employees in an array of size ‘n’. He can swap the skills as long as the absolute difference between their skills is 1. You need to help the manager out and tell whether it is possible to sort the skills of employees or not.
Input Format:
First Line will have an integer ‘t’ denoting the no. of test cases.
First line of each test case contains an integer ‘n’ denoting the no. of employees in the company.
Second line of each test case contains ‘n’ integers.
Output Format:
For each test case, print “Yes” if it is possible to sort the skills otherwise “No”.
Constraints:
1 <= t <= 10^4
1 <= n <= 10^5
Sum of n over all test cases doesn't exceed 10^6
Sample Input:
2
4
1 0 3 2
3
2 1 0
Sample Output:
Yes
No
Explanation:
In first T.C., [1, 0, 3, 2] -> [0, 1, 3, 2] -> [0, 1, 2, 3]
In second T.C., [2, 1, 0] -> [1, 2, 0]  OR  [2, 1, 0] -> [2, 0, 1] So, it is impossible to sort.

#include<bits/stdc++.h>
using namespace std;

bool checksort(int *arr, int n)
{
  for(int i =0; i<n; i++)
  {
    if(arr[i]>arr[i+1]){
      if(arr[i+1] == arr[i]-1)
        {
        swap(arr[i],arr[i-1]);
        }
      else
        return false;
    }
   }
   
   return true;
 }
 
 int main(){
int t;
cin>>t;
while(t--)
{
  int n;
  cin>>n;
  int *arr = new int[n];
  for(int i =0; i<n; i++)
  {
  cin>>arr[i];
  }
  if(checksort(arr,n))
  cout<<"YES"<<endl;
  else
  cout<<"NO"<<endl;
  
  }
}


Collecting the balls
Send Feedback
There are ‘n’ number of balls in a container. Mr. Sharma and Singh want to take balls out from the container. At each step, Mr. Sharma took ‘k’ balls out of the box and Mr. Singh took one-tenth of the remaining balls. Suppose there are 29 balls at the moment and k=4. Then, Mr. Sharma will take 4 balls and Mr. Singh will take 2 balls (29-4 = 25; 25/10 = 2). If there are less than ‘k’ balls remaining at some moment, then Mr. Sharma will take all the balls which will get the container empty. The process will last until the container becomes empty. Your task is to choose minimal ‘k’ for Mr. Sharma such that Mr. Sharma will take at least half of the balls from the container.
Input Format:
The first line of input will contain T (number of test cases).
The next n lines of input contain a single integer ‘n’.
Output Format:
For every test case print a single integer denoting the minimal value of ‘k’ in a newline.
Constraints:
1 <= T <= 10^4
1 <= n <= 10^18
Time Limit: 1 second
Sample Input:
1
68
Sample Output:
3
Explanation:
68-3 = 65; 65/10 = 6; 65-6 = 59
59-3 = 56; 56/10 = 5; 56-5 = 51
51-3 = 48; 48/10 = 4; 48-4 = 44
44-3 = 41; 41/10 = 4; 41-4 = 37
…..
…..
…..
6-3 = 3; 3/10 = 0; 3-0 = 3
3-3 = 0; 0/10 = 0; 0-0 = 0

#include <bits/stdc++.h>

using namespace std;

long long helper(long long start, long long end, long long N, long long &ans){
	// cout << "start: "<<start << '\n';
	// cout << "end "<<end << '\n';
	
	if (start > end)
	{
		return ans;
	}

	long long n = N;

	long long mid = (start+end)/2;
	//cout << "mid; "<<mid << '\n';
	long long k =  mid;
	//cout << k << '\n';

	long long sharma = 0, singh = 0;

	while(n>=k){
		sharma += k;
		n = n-k;
		singh += (n)/10;
		n = n-(n)/10;
	}

	sharma += n;
	//  cout << "sharma: " <<sharma<< '\n';
	// cout <<"singh: "<<singh  << '\n';

	
	// cout << sharma << '\n';
	// cout << N/2 << '\n';
	if (2*sharma<N)	
	{
		return helper(mid+1, end, N, ans);
	}else{
		ans = k;
		//cout <<"here "<<mid  << '\n';
		return helper(start, mid-1, N, ans);
		
	}


}


int main( int argc , char ** argv )
{
	ios_base::sync_with_stdio(false); 
	cin.tie(NULL); 
	int t;
    cin >> t;
    while(t--) {
        long long n;
        cin>>n;

        cout << helper(1, n, n, n) << '\n';

    }
	return 0 ; 



}




