Choose the correct
Send Feedback
Which function can be used to find the sum of a vector container?
Options
This problem has only one correct answer
findsum()
calcsum()
accumulate() - answer
total()
Hurray! Correct Answer
Solution Description
accumulate() function is used to calculate the sum of all the elements present in the vector.



Time complexity of sort function
Send Feedback
What is the time complexity of the sort function available in the STL?
Options
This problem has only one correct answer
O(1)
O(n)
O(n*log(n)) - answer
O(n*n)
Hurray! Correct Answer
Solution Description
Internally STL sort function uses introSort. It is a hybrid of Quicksort, Insertion sort and heap sort. Hence it takes (n*log(n)) time.




Time complexity of min and max function
Send Feedback
What is the time complexity of the min() and max() function available in the collection class?
Options
This problem has only one correct answer
O(1)
O(n) - answer
O(n*log(n))
O(n*n)
Hurray! Correct Answer
Solution Description
 min() and max() functions take O(n) because it check every element.
 
 
 
 Choose the correct
Send Feedback
How will you find the minimum between three numbers a, b, and c by using the STL min() function only?
Options
This problem has only one correct answer
min(a,b,c)
min(a,min(b,c)) - answer
Can't find
None of the above
Hurray! Correct Answer
Solution Description
min(a,min(b,c)) this will give us the minimum of a,b,c. Because first of all min(b,c) will be executed and it will return the minimum of ‘b’ and ‘c’, after that the outer min function will get executed and return as the minimum of ‘a’ and the other element.



Choose the correct
Send Feedback
What is the return type of the swap() function?
Options
This problem has only one correct answer
Integer
Double
Void - answer
Depends upon the arguments
Hurray! Correct Answer
Solution Description
The swap function doesn't return anything; it just swaps two numbers hence its return type is void.






Predict the output
Send Feedback
What will be the output of the following code?
 #include <bits/stdc++.h>
 using namespace std;

int main()
{
string s1 = "Ninjas";
s1.pop_back();
cout <<s1.substr(2, 4);
return 0;
} 
Options
This problem has only one correct answer
njas
inja
nja
inj
Hurray! Correct Answer
Solution Description
Initially s1="Ninjas", then we pop out the last element of the string s1 therefore s1 becomes "Ninja". Now we are printing substring of s1 from index 2 to 4. Therefore the output is nja.





First and last position of element in the sorted array
Send Feedback
You are given a sorted array ARR consisting of N integers and an integer X. You need to find the first and last position of occurrence of X in the array.
Note:
1. The array follows 0-based indexing, so you need to return 0-based indices.
2. If X is not present in the array, return “-1 -1”.
3. If X is only present once in the array, the first and last position of its occurrence will be the same.
Follow Up:
Try to solve the problem in O(log(N)) time complexity.
Input Format:
The first line of the input contains an integer T denoting the number of test cases.

The first line of each test case contains the integer N, denoting the size of the sorted array.

The second line of each test case contains N space-separated integers denoting the array elements.

The third and last line of each test case contains the value X, whose first and last position of occurrence you need to find.
Output Format:
The only line of output of each test case should contain two space-separated integers, where the first and second integer will be the first and the last position of occurrence of X respectively in the array.
Note:
Just implement the given function. You do not need to print anything, it has already been taken care of.
Constraints:
1 <= T <= 50
1 <= N <= 10^4
-10^9 <= ARR[i] <= 10^9
-10^9 <= X <= 10^9

Time Limit: 1sec
Sample Input 1:
1
5
-10 -5 -5 -5 2
-5
Sample Output 1:
1 3
Explanation for Sample Input 1:
The given array’s 0-based indexing is as follows:
-10    -5    -5    -5     2
 ↓      ↓     ↓     ↓     ↓
 0      1     2     3     4

So, the first occurrence of -5 is at index 1, and the last occurrence of -5 is at index 3.
Sample Input 2:
2
4
1 2 3 4
-1
4
1 2 3 4
3
Sample Output 2:
-1 -1
2 2

#include <utility>
#include <algorithm>
pair<int, int> findFirstLastPosition(vector<int> &a, int n, int x)
{
    int cnt = 0 , f = 0, l = 0;
    pair<int, int> p1;
    pair<int, int> p2 (-1,-1);
    if (find(a.begin(), a.end(), x) == a.end())
        return p2;
    else
    {
        cnt = count(a.begin(), a.end(), x);
        for(int i = 0 ; i < n ; i++)
        {
            if(a[i] == x)
            {
                 f = i;
                break;
            }
        }
        l = (f + cnt) - 1;
        }
    p1.first = f;p1.second = l;
    return p1;
    
        }

Choose the correct
Send Feedback
Which of the following is the correct way to find out the position of the maximum element present in the vector arr?
Options
This problem has only one correct answer
position = max_element(arr.begin(),arr.end());
position = max_element(arr.begin(), arr.end()) – arr.begin(); - answer
position = arr.(max_element());
position = arr.(max_element()) – arr.being();
Hurray! Correct Answer




Choose the correct
Send Feedback
What will the find() function return if the element you’re searching for isn’t present in the vector vect?
Options
This problem has only one correct answer
False
Not found
vect.end() - answer
0
Hurray! Correct Answer
Solution Description
 The find function returns the pointer of the first occurrence of the value but if it isn’t able to find the value, it will return the pointer pointing to the end of the vector.
 
 
 
 
 Choose the correct
Send Feedback
What is the time complexity of the upperbound() and lowerbound() functions?
Options
This problem has only one correct answer
O(1)
O(n)
O(n*log(n))
O(log(n)) - answer
Hurray! Correct Answer
Solution Description
Upper_bound() and lower_bound() functions are implemented through binary search, hence they take O(logn) time .
 
 
 
 Choose the correct
Send Feedback
What will the lower_bound() function return if the element you passed as an argument isn’t present in the vector vect?
Options
This problem has only one correct answer
an iterator pointing just greater element - answer
Not found
vect.end()
0
Hurray! Correct Answer
Solution Description
By the definition of lower_bound()




Time-based Key Value Store
Send Feedback
You are given a stream of tuples which constitute three things ‘Key’, ‘Val’, and the ‘Timestamp’.
Your task is to implement the ‘TimeBased’ class having the two functions:
1) The first function is ‘setKey(string Key, string Val, int Timestamp)’, which stores the ‘Key’ and the ‘Val’ along with the ‘Timestamp’.

2) The second function is ‘getValue(string TargetKey, int TargetTimestamp)’, which returns the value of ‘Val’ associated with the ‘TargetKey’ such that its ‘Timestamp’ value is less than or equal to the ‘TargetTimestamp’. If there are multiple values of ‘Val’, return the value of ‘Val’ with the highest value of ‘Timestamp’ among the valid ones. If there is no valid value of ‘Val’ return “-1” as a string.
‘Timestamps’ will always be in strictly increasing order.
Input format:
The first line of input contains an integer ‘T’, denoting the number of test cases. 

The first line of each test case contains an integer ‘N’, representing the total number of queries.

Then the next ‘N’ lines contain ‘N’ queries. A query can be of two types:
1 Key Val Timestamp  → stores the Key and the Val along with the Timestamp
2 TargetKey TargetTimestamp → returns the value of ‘Val’
Output format:
For each test case, print the value of ‘Val’ for each query of type 2 only, output the answer to the query in a single line.
Note:
You do not need to print anything. It has already been taken care of. Just implement the given functions.
Constraints:
1 <= T <= 10
1 <= N <= 3 * 10^4
1 <= | Val |, | Key | <= 10
1 <= Timestamp <= 10^7

Where ‘T’ represents the number of test cases, ‘N’ represents the number of queries, ‘Val’, ‘Key’ and ‘Timestamp’ are added to the stream.


Time Limit: 1 sec
Sample Input 1:
 2
 4
 1 abc def 10
 1 abc ghi 20
 2 abc 10
 2 abc 5
 3
 1 bbb ccc 5
 1 ddd ccc 5
 2 ddd 6 
Sample Output 1:
 def  -1
 ccc
Explanation For sample Input 1:
For the first test case, 
First, “abc” is added as a key and “def” as a value, and 10 as a timestamp. So at this moment, we have a single data, i.e. {“abc”, “def”, 10}. Then again, “abc” is added as a key along with “ghi” as a value and 20 as the timestamp. Now we have two records, i.e. {“abc”, “ghi”, 20} and {“abc”, “def”, 10}. Now query of type 2 is called, and we have to find the value of ‘Val’ such that its key is “abc” and its timestamp value should be less than or equal to the target timestamp ‘TargetTimestamp’ i.e 10. So the output for this query is “def”. Now again, the query of type 2 is called, and we have to find the value of ‘Val’ such that its key is “abc” and its timestamp value should be less than or equal to the target timestamp ‘TargetTimestamp’ i.e 5. So the output for this query is “-1” as there exists no value of timestamp, which is less than or equal to 5. 

For the second test case, 
First, “bbb” is added as a key along with “ccc” as a value and 5 as a timestamp. So at this moment, we have a single data, i.e. {“bbb”, “ccc”, 5}. Then again, the query of type 1 is executed, and “ddd” is added as a key along with “ccc” as value and 5 as a timestamp. Now we have two records, i.e. {“bbb”, “ccc”, 5} and {“ddd”, “ccc”, 5}. Now query of type 2 is called, and we have to find the value of ‘Val’ such that its key is “ddd” and its timestamp value should be less than or equal to target timestamp ‘TargetTimestamp’ i.e 6. So the output for this query is “ccc”. 
Sample Input 2:
2
3
1 yyy zzz 3
1 yyy xxx 4
2 yyy 4
4
2 fff 13
1 fff ggg 13
1 fff hhh 14
2 fff 14 
Sample Output 2:
xxx
-1 hhh
Explanation For Sample Input 2:
For the first test case, 
First, “yyy” is added as a key and “zzz” as a value, and 3 as a timestamp. So at this moment, we have a single data, i.e. {“yyy”, “zzz”, 3}. Then again, “yyy” is added as a key along with “xxx” as a value and 4 as the timestamp. Now we have two records, i.e. {“yyy”, “zzz”, 3} and {“yyy”, “xxx”, 4}. Now query of type 2 is called, and we have to find the value of ‘yyy’ such that its key is “yyy” and its timestamp value should be less than or equal to the target timestamp ‘TargetTimestamp’ i.e 4. So the output for this query is “xxx”.

For the second test case, 
Initially, no data is present so for query 2, the output will be -1. First, “fff” is added as a key along with “ggg” as a value and 13 as a timestamp. So at this moment, we have a single data, i.e. {“fff”, “ggg”, 13}. Then again, the query of type 1 is executed, and “fff” is added as a key along with “hhh” as value and 14 as a timestamp. Now we have two records, i.e. {“fff”, “ggg”, 13} and {“fff”, “hhh”, 14}. Now query of type 2 is called, and we have to find the value of ‘fff’ such that its key is “fff” and its timestamp value should be less than or equal to target timestamp ‘TargetTimestamp’ i.e 14. So the output for this query is “hhh”. 
/*
    Time Complexity: O(N * LogN)
    Space Complexity: O(N)

    Where 'N' is the total number of queries.
*/

#include <map>

// Create a class Data to store the input.
class Data {
    public:
        string value;
    int time;
};

class Timebased {
    public:
        /*
            Create a hashmap keyTimestampVal, which will store Key and 
            array of objects of class Data as an entry in a map.
        */
        map < string, vector < Data >> keyTimestampVal;

    // Insert each input in the form of object of class Data into array.
    void setKey(string key, string val, int timestamp) {
        Data d;
        d.value = val;
        d.time = timestamp;
        keyTimestampVal[key].push_back(d);
    }

    string getValue(string targetKey, int targetTimestamp) {

        // If the targetKey is not present in the hashmap.
        if (keyTimestampVal[targetKey].size() == 0) {
            return "-1";
        }

        int start = 0;
        int end = keyTimestampVal[targetKey].size() - 1;
        int mid = 0;

        /*
            Check if the value of the timestamp of the first entry of hashmap at 
            that TargetKey is greater than the value of TargetTimestamp.
        */
        if (targetTimestamp < keyTimestampVal[targetKey][start].time) {
            return "-1";
        }

        /*
            Check if the value TargetTimestamp is greater than or equal to the 
            value of the timestamp of the last entry of hashmap at that Key.
        */
        if (targetTimestamp >= keyTimestampVal[targetKey][end].time) {
            return keyTimestampVal[targetKey][end].value;
        }

        // Perform binary search over the array pointed by the targetKey.
        while (start < end) {

            mid = (start + end) / 2;

            if (keyTimestampVal[targetKey][mid].time == targetTimestamp) {
                return keyTimestampVal[targetKey][mid].value;
            } else if (keyTimestampVal[targetKey][mid].time > targetTimestamp) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }

        }

        return keyTimestampVal[targetKey][mid].value;
    }
};



Overlapping Intervals
Send Feedback
You have been given the start and end times of 'N' intervals. Write a function to check if any two intervals overlap with each other.
Note :
If an interval ends at time T and another interval starts at the same time, they are not considered overlapping intervals.
Input format :
The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains an integer 'N' representing the total number of intervals.

The second line contains 'N' single space-separated integers representing the starting time of the intervals. 

The third line contains 'N' single space-separated integers representing the end time of the intervals.
Output Format :
For each test case, return true if overlapping intervals are present. Otherwise, return false.

Output for every test case will be printed in a separate line.
Note :
You do not have to print anything. Just return the boolean value.
Constraints :
1 <= T <= 10^2
0 <= N <= 10^5
0 <= Start[i] <= 10^15
1 <= End[i] <= 10^15  

Time Limit: 1 sec
Sample Input 1 :
1
3
1 2 3
2 3 4
Sample Output 1 :
false
Explanation For Sample Input 1:
Here, in given intervals [1, 2], [2, 3], [3, 4], there are no overlapping intervals present.
Sample Input 2 :
2
1
100
200
2
2 1
3 4
Sample Output 2 :
false
true
#include <algorithm>
bool checkOverlappingIntervals(long* start, long* end, int n)
{
    sort( start , start + n);
    sort( end   , end + n);
    int i = 0 , j = 0;
    while((i < n) && ( j < n))
    {
        if((n == 1)||(n == 0))
            return false;
        else
        {
            
       i = j + 1;
        if(end[j] > start[i])
        {
            return true;
        }
        if(i ==(n - 1))
        {
            return false;
        }
    j++;
        }
    }
}


Maximum length pair chain
Send Feedback
You are given ‘N’ pairs of integers in which the first number is always smaller than the second number i.e in pair (a,b) -> a < b always. Now we define a pair chain as the continuous arrangement of pairs in which a pair (c,d) can follow another pair (a,b) only when b < c.
Find the length of the longest pair chain that can be formed using the given pairs.
Example:
Given Pairs =  [3,4], [1,2], [2,3].

The length of the maximum chain will be 2. The longest chain is [1,2] -> [3,4].
Note:
1. You can select a pair only once.

2. You needn’t use up all the given pairs.

3. You can select pairs in any order. 
Input Format:
The first line of the input contains an integer ‘T’ denoting the number of test cases.

The first line of each test case contains a single positive integer ‘N’ denoting the total number of the pairs.

Next ‘N’ lines of each test case contain two space-separated integers ‘a’ and ‘b’ denoting the elements of the pair.
Output Format:
For each test case, return a positive integer denoting the maximum length of the pair chain that can be possible while satisfying the given condition.

The output of each test case will be printed in a separate line.
Note:
You don’t need to print anything, it has been already taken care of. Just implement the given function.
Constraints:
1 <= T <= 100
1 <= N <= 10^4 
-10^9 <= a,b <= 10^9

Where ‘a’ and ‘b’ is the elements of the pair.

Time Limit: 1 sec
Sample Input 1:
2
3
5 8 
3 4
3 4
2
2 3
-1 2
Sample Output 1:
2
1
Explanation for Sample Output 1:
In test case 1, The max length pair chain will be [3,4], -> [5,8] as 4 < 5 that means we can join these two pairs and form a chain of length two.

In test case 2, To join two pairs (a,b), (c,d) we need b < c but this condition is not satisfied by the given pairs in the input hence the max length will be 1 and the max length pair chain will be [2,3] or [-1,2].
Sample Input 2:
2
1
10 20
4
4 6
2 3
9 12
15 20
Sample Output 2:
1
4
Explanation for Sample Output 2:
In test case 1, The max length pair chain will be [10,20] form a chain of length one.

In test case 2, The max length pair chain will be [2,3] -> [4,6] -> [9,12] -> [15,20], that means we can join these two pairs as it satisfies the condition and form a chain of length four.

#include <algorithm> 
#include <vector>
bool comparator(pair<int, int> p1, pair<int, int> p2)
{
    return (p1.second < p2.second); 
}
int maxLengthChain(vector<pair<int, int>> &p, int n)
{ 
    sort(p.begin(), p.end(), comparator); 
    int length = 1, chainEnd = p[0].second;
    for (int i = 1; i < n; i++) { 
        if (chainEnd < p[i].first) 
        {
            length++; 
            chainEnd = p[i].second; 
        } 
    } return length; 
}



Closest Distance Pair
Send Feedback
You are given an array containing 'N' points in the plane. The task is to find out the distance of the closest points.
Note :
Where distance between two points (x1, y1) and (x2, y2) is calculated as [(x1 - x2) ^ 2] + [(y1 - y2) ^ 2].
Input Format :
The first line contains a single integer 'N' denoting the number of points.

The next 'N' lines contain two integers separated by a single space, where the first integer represents the x coordinate and the second integer represents the y coordinate.
Output Format :
The only line contains the minimum distance between the 'N' points.
Note:
You do not need to print anything, it has already been taken care of. Just implement the given function.
Constraints :
2 <= 'N' <= 10^5
-10^5 <= 'x' <= 10^5 
-10^5 <= 'y' <= 10^5

Time Limit: 1 sec
Sample Input 1:
5
1 2
2 3
3 4
5 6
2 1
Sample Output 1:
2
Explanation of Sample Output 1:
We have 2 pairs which are probable answers (1, 2) with (2, 3) and (2, 3) with (3, 4). The distance between both of them is equal to 2.
Sample Input 2 :
3
0 0
-3 -4
6 4
Sample Output 2 :
25
Explanation of Sample Output 1 :
If we choose the pairs (0, 0) and (-3, -4), the distance between them is 3^2 + 4^2 = 25. This is the optimal answer for this test case.

/*#include<bits/stdc++.h>

bool sortbysec( pair<int,int> a,   pair<int,int> b){
    return(a.second < b.second);
    
    }

long closestPair(pair<int, int>* a, int n)
{
    int x_med = ((0 + (n - 1))/2);
    int     d_med, d_base1, d_base2;
    sort(a, a+n);
    if(n == 3)
    {
        for( int i = 0 ; i < n ; i++)
        {
            for( int j = i + 1 ; j < n ; j++)
            {
               d_base1 = pow((a[i].first - a[j].first),2) + pow((a[i].second - a[j].second),2);
            }
        }
    }
    if(n == (n - 3))
    {
        for( int i = 0 ; i < n ; i++)
        {
            for( int j = i + 1 ; j < n ; j++)
            {
               d_base2 = pow((a[i].first - a[j].first),2) + pow((a[i].second - a[j].second),2);
            }
        }
    }
    
    int d1 = closestPair(a,x_med);
    d1 = min( d1 , d_base1 ); 
    int d2 = closestPair((a + (x_med + 1)),((n - 1) - x_med));
    d2 = min( d2 , d_base2 );
    int d = min(d1,d2);
    
    sort( a + x_med - d, a + x_med + d, sortbysec);
    
    for(int i = x_med - d ; i < x_med ; i++ )
    {
        for(int j = x_med ; j <= (x_med + d) ; j++)
        {
            d_med = pow((a[i].first - a[j].first),2) + pow((a[i].second - a[j].second),2);
        }
    }
    int ans = min( d_med , d);
    return ans;
    }
*/

#include <bits/stdc++.h>



bool cmpY (pair<int, int> a, pair<int, int> b) {
    return a.second < b.second;
}

long dist(pair<int, int> a, pair<int, int> b) {
    return ((long)((long)a.first - b.first) * (a.first - b.first)) + ((long)((long)a.second - b.second) * (a.second - b.second));
}

long findMinDist(pair<int, int> a[], int n) {
    long min = LONG_MAX;
    for (int i = 0; i < n; i++) {
        for (int j = i+1; j < n; j++) {
            if (dist(a[i], a[j]) < min)
                min = dist(a[i], a[j]);
        }
    }
    return min;
}

long min(long x, long y) {
    return (x < y) ? x : y;
}

long stripClose(pair<int, int> a[], int size, long minDist) {
    sort(a,a+size,cmpY);
    long min = minDist;
    for (int i = 0; i < size; i++) {
        for (int j = i+1; j < size && (a[j].second - a[i].second) < min; ++j) {
            if(dist(a[i], a[j]) < min)
                min = dist(a[i], a[j]);
        }
    }
    return min;
}

long findClosest(pair<int, int> xSorted[], pair<int, int> ySorted[], int n) {
    if (n <= 3)
        return findMinDist(xSorted, n);
    
    long mid = n/2;
    
    pair<int, int> midPoint = xSorted[mid];
    pair<int, int> ySortedLeft[mid+1];
    pair<int, int> ySortedRight[n-mid];
    int leftIndex = 0, rightIndex = 0;
    for (int i = 0; i < n; i++) {
        if ((ySorted[i].first < midPoint.first || (ySorted[i].first == midPoint.first && ySorted[i].second < midPoint.second)) && leftIndex < mid)
            ySortedLeft[leftIndex++] = ySorted[i];
        else
            ySortedRight[rightIndex++] = ySorted[i];
    }
    
    long leftDist = findClosest(xSorted, ySortedLeft, mid);
    long rightDist = findClosest(xSorted + mid, ySortedRight, n - mid);
    long minDist =  min(leftDist, rightDist);
    
    pair<int, int> strip[n];
    int j = 0;
    for (int i = 0; i < n; i++) {
        if (abs(ySorted[i].first - midPoint.first) < minDist) {
            strip[j++] = ySorted[i];
        }
    }
    return stripClose(strip, j, minDist);

}

long closestPair(pair<int, int>* coordinates, int n)
{
    //Write your code here
    pair<int, int>* xSorted = new pair<int, int>[n];
    pair<int, int>* ySorted = new pair<int, int>[n];
    
    for (int i = 0; i < n; i++) {
        xSorted[i] = coordinates[i];
        ySorted[i] = coordinates[i];
    }
    sort(xSorted, xSorted + n);
    sort(ySorted, ySorted + n);
    
    return findClosest(xSorted, ySorted, n);
    
    
}
    
    
        
    
    
    
    
        
    
    
    
    
    
    
