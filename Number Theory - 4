Fibonacci Sum
Send Feedback
The fibonacci sequence is defined by the following relation:
 F(0) = 0
 F(1) = 1
 F(N) = F(N - 1) + F(N - 2), N >= 2
Your task is very simple. Given two non-negative integers N and M (N <= M), you have to calculate and return the sum (F(N) + F(N + 1) + ... + F(M)) mod 1000000007.
Input Format :
First line of input will contain T(number of test cases), each test case follows as.
Two non-negative space-separated integers N and M. (N <= M)
Output Format :
A new line containing the answer for the each test case.
Constraints:
1 <= T <= 10^3
1 <= N <= M <= 10^18
Sample Input :
1 
10 19 
Sample Output :
10857

/*
The fibonacci sequence is defined by the following relation:
 F(0) = 0
 F(1) = 1
 F(N) = F(N - 1) + F(N - 2), N >= 2
Your task is very simple. Given two non-negative integers N and M (N <= M), you
have to calculate and return the sum (F(N) + F(N + 1) + ... + F(M)) mod
1000000007. Input Format : First line of input will contain T(number of test
cases), each test case follows as. Two non-negative space-separated integers N
and M. (N <= M) Output Format : A new line containing the answer for the each
test case. Constraints: 1 <= T <= 10^3 1 <= N <= M <= 10^18 Sample Input :
1
10 19
Sample Output :
10857
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
const ll mod = 1e9 + 7;

void mult(ll a[][2], ll b[][2]) {
  ll res[2][2];
  memset(res, 0, sizeof res);

  for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 2; j++) {
      for (int k = 0; k < 2; k++) {
        res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % mod;
      }
    }
  }
  for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 2; j++) {
      a[i][j] = res[i][j];
    }
  }
}
ll helper(ll num) {
  ll q[2][2] = {{1, 1}, {1, 0}};
  ll w[2][2] = {{1, 0}, {0, 1}};
  while (num) {
    if (num & 1)
      mult(w, q);

    mult(q, q);

    num >>= 1;
  }

  return w[0][1];
}

ll fiboSum(ll m, ll n) { return (helper(n + 2) - helper(m + 1) + mod) % mod; }

int main() {
  int t;
  cin >> t;
  while (t--) {
    ll n, m;
    cin >> n >> m;
    cout << fiboSum(n, m) << endl;
  }
}




Boring Factorials
Send Feedback
Sameer and Arpit want to overcome their fear of Maths and so they have been recently practising Maths problems a lot. Aman, their friend has been helping them out. But as it goes, Sameer and Arpit have got bored with problems involving factorials. Reason being, the factorials are too easy to calculate in problems as they only require the residue modulo some prime and that is easy to calculate in linear time. So to make things interesting for them, Aman - The Mathemagician, gives them an interesting task. He gives them a prime number P and an integer N close to P, and asks them to find N! modulo P. He asks T such queries.
Input Format:
First line contains an integer T, the number of queries asked.
Next T lines contains T queries of the form “N P”. (quotes for clarity)
Output Format:
Output exactly T lines, containing N! modulo P.
Constraints:
1 <= T <= 1000
1 < P <= 2*10^9
1 <= N <= 2*10^9
Abs(N-P) <= 1000
Sample Input:
3
2 5
5 11
21 71
Sample Output:
2
10
6

/*
Sameer and Arpit want to overcome their fear of Maths and so they have been
recently practising Maths problems a lot. Aman, their friend has been helping
them out. But as it goes, Sameer and Arpit have got bored with problems
involving factorials. Reason being, the factorials are too easy to calculate in
problems as they only require the residue modulo some prime and that is easy to
calculate in linear time. So to make things interesting for them, Aman - The
Mathemagician, gives them an interesting task. He gives them a prime number P
and an integer N close to P, and asks them to find N! modulo P. He asks T such
queries. Input Format: First line contains an integer T, the number of queries
asked. Next T lines contains T queries of the form âN Pâ. (quotes for clarity)
Output Format:
Output exactly T lines, containing N! modulo P.
Constraints:
1 <= T <= 1000
1 < P <= 2*10^9
1 <= N <= 2*10^9
Abs(N-P) <= 1000
Sample Input:
3
2 5
5 11
21 71
Sample Output:
2
10
6
*/
#include <bits/stdc++.h>
#define ll long long int

using namespace std;

ll pow1(ll a, ll b, ll c) {
  ll ans = 1LL;
  while (b > 0) {
    if (b & 1)
      ans = (ans * a) % c;
    a = (a * a) % c;
    b = b >> 1;
  }
  return ans;
}
int main() {
  ll n, p, i, ans, fact;
  int t;
  cin >> t;
  while (t--) {
    fact = 1;
    cin >> n >> p;
    if (n >= p) {
      cout << 0 << endl;
      continue;
    }
    for (i = n + 1; i <= p - 1; i++) {
      fact = (fact * i) % p;
      if (fact == 0)
        break;
    }
    ans = pow1(fact, p - 2, p);
    cout << p - ans << endl;
  }
  return 0;
}



Income On Nth Day
Send Feedback
Daulat Ram is an affluent business man. After demonetization, IT raid was held at his accommodation in which all his money was seized. He is very eager to gain his money back, he started investing in certain ventures and earned out of them. On the first day, his income was Rs. X, followed by Rs. Y on the second day. Daulat Ram observed his growth as a function and wanted to calculate his income on the Nth day.
The function he found out was FN = FN-1 + FN-2 + FN-1×FN-2
Given his income on day 0 and day 1, calculate his income on the Nth day (yeah Its that simple).
Input Format:
The first line of input consists of a single integer T denoting the number of test cases.
Each of the next T lines consists of three integers F0, F1 and N respectively.
Output Format:
For each test case, print a single integer FN, as the output can be large, calculate the answer modulo 10^9+7.
Constraints:
1 ≤ T ≤ 10^5
0 ≤ F0, F1, N ≤ 10^9
Sample Input :
2
0 1 2
1 2 4
Sample Output:
1
107
Explanation
In the second test case his income on day 0 is 1 and the income on day 1 is 2. We need to calculate his income on day 4.

F0=1

F1=2

F2=1 + 2 + 1×2 = 5

F3=2 + 5 + 2×5 = 17

F4=5 + 17 + 5×17 = 107

/*
Daulat Ram is an affluent business man. After demonetization, IT raid was held
at his accommodation in which all his money was seized. He is very eager to gain
his money back, he started investing in certain ventures and earned out of them.
On the first day, his income was Rs. X, followed by Rs. Y on the second day.
Daulat Ram observed his growth as a function and wanted to calculate his income
on the Nth day. The function he found out was FN = FN-1 + FN-2 + FN-1ÃFN-2 Given
his income on day 0 and day 1, calculate his income on the Nth day (yeah Its
that simple). Input Format: The first line of input consists of a single integer
T denoting the number of test cases. Each of the next T lines consists of three
integers F0, F1 and N respectively. Output Format: For each test case, print a
single integer FN, as the output can be large, calculate the answer modulo
10^9+7. Constraints: 1 â¤ T â¤ 10^5 0 â¤ F0, F1, N â¤ 10^9 Sample Input :
2
0 1 2
1 2 4
Sample Output:
1
107
Explanation
In the second test case his income on day 0 is 1 and the income on day 1 is 2.
We need to calculate his income on day 4. F0=1 F1=2 F2=1 + 2 + 1Ã2 = 5 F3=2 + 5
+ 2Ã5 = 17 F4=5 + 17 + 5Ã17 = 107
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define mod 1000000007

ll fib(ll n) {
  if (n == 0 || n == 1 || n == 5)
    return n;
  if (n == 2)
    return 1;
  n--;

  ll a[2][2] = {1, 1, 1, 0};
  ll ans[2][2] = {1, 0, 0, 1};
  ll temp[2][2];
  ll m = mod - 1, i, j, k;
  while (n) {
    if (n & 1) {
      // ans=ans*a
      for (i = 0; i < 2; i++)
        for (j = 0; j < 2; j++) {
          temp[i][j] = 0;
          for (k = 0; k < 2; k++) {
            temp[i][j] += a[i][k] * ans[k][j];
            temp[i][j] %= m;
          }
        }
      for (i = 0; i < 2; i++)
        for (j = 0; j < 2; j++)
          ans[i][j] = temp[i][j];
    }
    // a=a*a
    for (i = 0; i < 2; i++)
      for (j = 0; j < 2; j++) {
        temp[i][j] = 0;
        for (k = 0; k < 2; k++) {
          temp[i][j] += a[i][k] * a[k][j];
          temp[i][j] %= m;
        }
      }
    for (i = 0; i < 2; i++)
      for (j = 0; j < 2; j++)
        a[i][j] = temp[i][j];
    n >>= 1;
  }
  return ans[0][0];
}
ll mpow(ll a, ll b) {
  ll ans = 1;
  while (b) {
    if (b & 1)
      ans = (ans * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return ans;
}
int main() {
  int t;
  ll a, b, c, n, i, x, y;
  cin >> t;
  while (t--) {
    cin >> a >> b >> n;
    if (n == 0)
      cout << a << endl;
    else if (n == 1)
      cout << b << endl;
    else {
      x = fib(n - 1);
      y = fib(n);
      // cout<<x<<" "<<y<<endl;
      c = mpow(a + 1, x) * mpow(b + 1, y);
      c--;
      c = c % mod;
      if (c < 0)
        c += mod;
      cout << c << endl;
    }
  }
  return 0;
}




Cubic Square
Send Feedback
Varun is learning method of successive squaring so that he can calculate a^b mod m quickly. To give himself practice he wrote many tuples of a, b and m and went to school thinking that he will do it after school.
After school he found that tuples he wrote are modified by his little sister. His sister converted each b into base 3. Varun wrote everything in base 10.
Help Varun to do his exercise.
Input Format:
First line of input contains a number T(number of test case). Each test case contains an integer a(base 10) followed by a string b (base 3) followed by integer m (base 10). All are space-separated.
Output Format;
Output a number for each test case a^b mod m in base 10 in new line.
Constraints:
1 <= T <= 1000
1 <= a, m <= 10^9
Number of digits in b will be less than 250.
Sample Input:
2
2 10 10
3 21101 19
Sample Output:
8
3

/*
Varun is learning method of successive squaring so that he can calculate a^b mod
m quickly. To give himself practice he wrote many tuples of a, b and m and went
to school thinking that he will do it after school. After school he found that
tuples he wrote are modified by his little sister. His sister converted each b
into base 3. Varun wrote everything in base 10. Help Varun to do his exercise.
Input Format:
First line of input contains a number T(number of test case). Each test case
contains an integer a(base 10) followed by a string b (base 3) followed by
integer m (base 10). All are space-separated. Output Format; Output a number for
each test case a^b mod m in base 10 in new line. Constraints: 1 <= T <= 1000 1
<= a, m <= 10^9 Number of digits in b will be less than 250. Sample Input:
2
2 10 10
3 21101 19
Sample Output:
8
3
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
int main() {

  // write your code here
  ll t;
  cin >> t;
  while (t--) {
    ll a;
    cin >> a;
    string b;
    cin >> b;
    ll m;
    cin >> m;
    ll l = b.length();
    ll result = 1;
    for (ll i = l - 1; i >= 0; i--) {

      if (b[i] == '0') {

      } else if (b[i] == '1') {
        result = (result % m * a % m) % m;
      } else if (b[i] == '2') {
        result = ((result % m * a % m) * a % m) % m;
      }
      a = ((a * a) % m * a) % m;
    }
    cout << result << endl;
  }
  return 0;
}





GCD Extreme
Send Feedback
Given the value of N, you will have to find the value of G. The meaning of G is given in the following code
G=0;
for(i = 1 ; i < N ; i++)
   for(j = i+1 ; j <= N ; j++) 
       G+=gcd(i,j);
Here gcd() is a function that finds the greatest common divisor of the two input numbers.
Input Format:
The first line of input will contain T(number of the test case). Each test case contains an integer N.
Output Format:
For each test case print the answer in a new line.
Constraints:
1 <= T <= 10^5
1 <= N <= 10^5
Sample Input:
3
10
100
3
Sample Output:
67
13015
3

/*
Given the value of N, you will have to find the value of G. The meaning of G is
given in the following code G=0; for(i = 1 ; i < N ; i++) for(j = i+1 ; j <= N ;
j++) G+=gcd(i,j); Here gcd() is a function that finds the greatest common
divisor of the two input numbers. Input Format: The first line of input will
contain T(number of the test case). Each test case contains an integer N. Output
Format: For each test case print the answer in a new line. Constraints: 1 <= T
<= 10^5 1 <= N <= 10^5 Sample Input:
3
10
100
3
Sample Output:
67
13015
3
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
const ll mex = 1e5 + 1;
ll arr[mex];
void sieve() {

  for (ll i = 0; i < mex; i++) {
    arr[i] = i;
  }

  for (ll i = 2; i < mex; i++) {
    if (arr[i] == i) {
      arr[i] -= 1;
      for (ll j = 2 * i; j < mex; j += i) {
        arr[j] = arr[j] * (i - 1) / i;
      }
    }
  }
}

int main() {

  ll t;
  cin >> t;
  sieve();
  ll result[mex];
  memset(result, 0, sizeof(result));
  for (ll i = 1; i < mex; i++) {
    for (ll j = 2; i * j < mex; j++) {
      result[i * j] += (i * arr[j]);
    }
  }
  ll dp[mex];
  dp[0] = result[0];
  for (ll i = 1; i < mex; i++) {
    dp[i] = result[i] + dp[i - 1];
  }
  while (t--) {
    ll n;
    cin >> n;
    ll sum = 0;
    cout << dp[n] << endl;
  }
}



Sanchit And Nuclear Reactor
Send Feedback
We all know Sanchit Lee Cooper who is a Caltech theoretical physicist. He has eccentric and arrogant behavior. Due to his belief that he's intellectually superior, he's not ashamed to insult his own friends, like Howard, who is an engineer and not a real scientist. But nobody messes with an engineer. So Howard accepted an challenge from Sanchit. Sanchit was involved in numerous experiments as a wunderkind, such as his plan for building his own nuclear reactor - a plan stopped by government. So Sanchit presented Howard with a problem about his own nuclear reactor. It contains a large tank and at each second an atom is introduced in the tank which reacts with already existing atoms and produces some energy. Also he defined a special threshold number for his reactor called Cooper number m which is always a prime number. Energy output is defined as previous energy output of the tank multiplied by number of atoms present in it. But due to some special condition of the tank, all atoms attains stable state (net charge becomes 0) when number of atoms are multiple of Cooper number and no new reaction occurs. Energy output in this case is same as previous case. Also initial energy of the reactor is 1 and initially there is no atom in the tank. Now Sanchit ask Howard to tell the energy output after time T. But sadly Howard is not able to solve it and ask for your help.
Input Format
The first line of input contains T(number of the test case), each test case follows as.
contian two space-separated integers N and M where M is a prime number.
Output Format
You have to determine the energy output after time T. As the number can be quite large so output it modulo Cooper number m.
Constraints:
1 <= T <= 100
1 <= N <= 10^18
1 <= M <= 10^4
Sample Input
2
1 5
2 5
Sample Output
1
2
Explanation
After 1 seconds, there is only 1 atom in the tank. Hence energy output is 1. After 2 seconds, there are 2 atoms which reacts to give energy output of 2.

/*
We all know Sanchit Lee Cooper who is a Caltech theoretical physicist. He has
eccentric and arrogant behavior. Due to his belief that he's intellectually
superior, he's not ashamed to insult his own friends, like Howard, who is an
engineer and not a real scientist. But nobody messes with an engineer. So Howard
accepted an challenge from Sanchit. Sanchit was involved in numerous experiments
as a wunderkind, such as his plan for building his own nuclear reactor - a plan
stopped by government. So Sanchit presented Howard with a problem about his own
nuclear reactor. It contains a large tank and at each second an atom is
introduced in the tank which reacts with already existing atoms and produces
some energy. Also he defined a special threshold number for his reactor called
Cooper number m which is always a prime number. Energy output is defined as
previous energy output of the tank multiplied by number of atoms present in it.
But due to some special condition of the tank, all atoms attains stable state
when number of atoms are multiple of Cooper number and no new reaction occurs.
Energy output in this case is same as previous case. Also initial energy of the
reactor is 1 and initially there is no atom in the tank. Now Sanchit ask Howard
to tell the energy output after time T. But sadly Howard is not able to solve it
and ask for your help. Input Format The first line of input contains T(number of
the test case), each test case follows as. contian two space-separated integers
N and M where M is a prime number. Output Format You have to determine the
energy output after time T. As the number can be quite large so output it modulo
Cooper number m. Constraints: 1 <= T <= 100 1 <= N <= 10^18 1 <= M <= 10^4
Sample Input
2
1 5
2 5
Sample Output
1
2
Explanation
After 1 seconds, there is only 1 atom in the tank. Hence energy output is 1.
After 2 seconds, there are 2 atoms which reacts to give energy output of 2.
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
ll factorial(ll n, ll m) {
  ll ans = 1;
  for (ll i = 2; i <= n; i++) {
    ans = (ans % m * i % m) % m;
  }
  return ans;
}

int main() {
  ll t;
  cin >> t;
  while (t--) {
    ll n, m;
    cin >> n >> m;
    if (n < m) {
      if (m + 1 == n) {
        cout << 1 << endl;
      } else {
        cout << factorial(n, m) << endl;
      }
    } else {
      ll x = n % m;
      ll ans = factorial(x, m);
      if ((n / m) % 2 == 0) {
        cout << ans << endl;
      } else {
        cout << ((m - 1) * ans) % m << endl;
      }
    }
  }
}





Innocent Swaps and His Emotions
Send Feedback
There are only three phases in Swaps life: Sleep, Play and Study. Also, there are two types of emotions Swaps experiences: Happy and Sad. Each phase of his life brings either kind of emotions.
The sleep and the play phase makes Swaps happy whereas the study phase makes him sad. Quite obvious, isn't it? But we know that life isn't that great, one cannot be happy all the time.
Swaps, being a very sensitive guy, doesn't like to mix his emotions on a particular day. So each day, he is in exactly one of the three phases.
Given N which denotes the number of days and K which denotes the exact number of days Swaps needs to be happy out of these N days, can you tell him in how many ways can he achieve this? Since the output value can be very large, take modulo with 1000000007(10^9+7)
Input Format:
The first line of the input contains T, denoting the number of test cases.

The next T lines contain two space-separated integers N and K.
Constraints:
1 <=T <= 10^5
1<= K <= N <= 10^6
Output Format:
For each test-case, output a single integer, the number of ways modulo 1000000007(10^9+7).
Sample Input 1:
3
1 1
2 1
3 2
Sample Output 2:
2
4
12
Explanation
In the first test case, he needs to feel joyful on Day 1. Hence, answer is 2 (He can either play video games or sleep).

In the second test case, he can be joyful either on Day 1 or Day 2. So number of ways = 4.

/*
There are only three phases in Swaps life: Sleep, Play and Study. Also, there
are two types of emotions Swaps experiences: Happy and Sad. Each phase of his
life brings either kind of emotions. The sleep and the play phase makes Swaps
happy whereas the study phase makes him sad. Quite obvious, isn't it? But we
know that life isn't that great, one cannot be happy all the time. Swaps, being
a very sensitive guy, doesn't like to mix his emotions on a particular day. So
each day, he is in exactly one of the three phases. Given N which denotes the
number of days and K which denotes the exact number of days Swaps needs to be
happy out of these N days, can you tell him in how many ways can he achieve
this? Since the output value can be very large, take modulo with
1000000007(10^9+7) Input Format: The first line of the input contains T,
denoting the number of test cases. The next T lines contain two space-separated
integers N and K. Constraints: 1 <=T <= 10^5 1<= K <= N <= 10^6 Output Format:
For each test-case, output a single integer, the number of ways modulo
1000000007(10^9+7). Sample Input 1:
3
1 1
2 1
3 2
Sample Output 2:
2
4
12
Explanation
In the first test case, he needs to feel joyful on Day 1. Hence, answer is 2 (He
can either play video games or sleep). In the second test case, he can be joyful
either on Day 1 or Day 2. So number of ways = 4.
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int m = 1e9 + 7;
const int xe = 1e9 + 5;
ll arr[1000001];

void factori() {
  arr[0] = 1;
  for (int i = 1; i < 1000001; i++) {
    arr[i] = (arr[i - 1] % m * i % m) % m;
  }
}

inline ll factorial(ll n) { return arr[n]; }
ll binexpo(ll a, ll b) {
  ll ans = 1;
  while (b > 0) {
    if (b & 1)
      ans = (ans * a) % m;

    a = (a * a) % m;
    b >>= 1;
  }
  return ans;
}
int main() {
  factori();
  ll t;
  cin >> t;
  while (t--) {

    ll n, k;
    cin >> n >> k;
    ll x1 = factorial(n);

    ll x2 = factorial(n - k);
    ll x3 = factorial(k);

    ll y1 = binexpo(x2, xe);

    ll y2 = binexpo(x3, xe);

    ll y3 = binexpo(2, k);
    ll ans = (x1 % m * y1 % m * y2 % m * y3 % m) % m;
    cout << ans << endl;
  }
}




Sehwag and ETF
Send Feedback
Sehwag has been solving a lot of mathematical problems recently. He was learning ETF (Euler Totient Function) and found the topic quite interesting. So, he tried solving a question on ETF. He will be given two numbers L and R. He has to find the probability that the ETF of a number in the range [L, R] is divisible by a number K.
Input Format:
The first line contains an integer T, representing the number of test cases.
The next T lines will contain three integers L, R and K.
Constraints:
1 <= T <= 10
1 <= L <= R <= 10^12
0 <= R - L <= 10^5
1 <= K <= 10^6
Output Format:
Print the answer in a new line after rounding off the first 6 digits after the decimal place.
Sample Input 1:
3
1 4 2
2 5 2
3 10 4
Sample Output 1:
0.500000
0.750000
0.375000

#include <bits/stdc++.h>
using namespace std;
#define ll long long
const ll mex = 1e5 + 1;

vector<ll> sieve() {
  bool isprime[mex];
  memset(isprime, true, sizeof(isprime));
  isprime[0] = false;
  isprime[1] = false;
  for (ll i = 2; i < mex; i++) {
    if (isprime[i]) {
      for (ll j = i * i; j < mex; j += i) {
        isprime[j] = false;
      }
    }
  }

  vector<ll> v;
  v.push_back(2);
  for (ll i = 3; i < mex; i += 2) {
    if (isprime[i]) {
      v.push_back(i);
    }
  }
  return v;
  // do someting
}
int main() {

  ll t;
  cin >> t;
  vector<ll> v = sieve();

  while (t--) {

    ll a, b, k;
    cin >> a >> b >> k;
    ll phi[mex];
    ll arr[mex];

    for (ll i = a; i <= b; i++) {
      phi[i - a] = i;
      arr[i - a] = i;
    }

    for (ll i = 0; v[i] * v[i] <= b; i++) {
      ll curx = v[i];
      ll base = (a / curx) * curx;
      if (base < a) {
        base += curx;
      }

      for (ll j = base; j <= b; j += curx) {
        while (arr[j - a] % v[i] == 0)
          arr[j - a] /= v[i];
        phi[j - a] -= phi[j - a] / v[i];
      }
    }

    for (ll i = a; i <= b; i++) {
      if (arr[i - a] > 1) {
        phi[i - a] -= phi[i - a] / arr[i - a];
      }
      arr[i - a] = 1;
    }
    ll cnt = 0;

    for (ll i = a; i <= b; i++) {
      if (phi[i - a] % k == 0) {
        cnt++;
      }
    }
    cout << fixed << setprecision(6) << double(cnt) / double(b - a + 1) << endl;
  }
}




