Check Armstrong
Write a Program to determine if the given number is Armstrong number or not. Print true if number is armstrong, otherwise print false.
An Armstrong number is a number (with digits n) such that the sum of its digits raised to nth power is equal to the number itself.
For example,
371, as 3^3 + 7^3 + 1^3 = 371
1634, as 1^4 + 6^4 + 3^4 + 4^4 = 1634
Input Format :
Integer n
Output Format :
true or false
Sample Input 1 :
1
Sample Output 1 :
true
Sample Input 2 :
103
Sample Output 2 :
false

// c++ program to check whether the given number is armstrong or not
#include<bits/stdc++.h>
using namespace std;
int isArmstrongNumber(int n){
    // Calculating the number of digits
    int digit = log10(n) + 1;
    
    // taking temporary variable to check
    // in last whether the given number is armstrong or not
    int temp = n;
    int sum = 0;
    
    while(n>0){
        // getting the digit of a number n
        int lastDigit = n % 10;
        n/=10;
        // adding the digit raised to number of digits in the sum variable
        sum += pow(lastDigit, digit);
    }
    
    // return true if sum and temp are equal
    // otherwise return false
    return temp == sum;
}
int main(){
    int n;
	cin>>n;
    if(isArmstrongNumber(n))
        cout<<"true";
    else
        cout<< "false";
}






Special Sum of array
Given an array of length N, which contains single digit elements at every index. You need to find and return the sum of all elements of the array. But the final sum should also be single digit.
In order to keep the output single digit - you need to keep adding the output number digits till single digit is left.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Output Format :
Single digit sum
Constraints :
1 <= N <= 10^6
Sample Input 1 :
3
9 9 9
Sample Output 1 :
9
Sample Output Explanation :
9 + 9 + 9 = 27
2 + 7 = 9
Hence, ans is 9.
Sample Input 2 :
5
1 7 8 5 9
Sample Output 1 :
3
Sample Output Explanation :
1 + 7 + 8 + 5 + 9 = 30
3 + 0 = 3
Hence, ans is 3.


/*
    Time Complexity: O( N ).
    Space Complexity: O( 1 ).
    
    Where, N is the size of the array/list.
*/
#include<bits/stdc++.h>

int sum(int* arr, int n){

    // Declare a variable 'sum' and initialize it with zero.
    int sum = 0;

    for(int i = 0; i < n; i ++){

        // Add each element to the variable 'sum'.
        sum += arr[i];

        if( sum > 9 ){

            /*
                Store the sum of the digits of the variable 
               'sum' in a new variable 'tempSum'.
            */
            int tempSum = 0;
            tempSum += sum % 10;
            sum /= 10;
            tempSum += sum;

            // Update 'sum' as 'tempSum'. 
            sum = tempSum;
        }
    }

    return sum;

}





Rectangular numbers
Print the following pattern for the given number of rows.
Pattern for N = 4
4444444
4333334
4322234
4321234
4322234
4333334  
4444444
Input format : N (Total no. of rows)

Output format : Pattern in N lines

Sample Input :
3
Sample Output :
33333
32223
32123
32223
33333


// C++ Program to print rectangular
// inner reducing pattern
#include <bits/stdc++.h>
using namespace std;

#define max 100

// function to Print pattern
void print(int a[][max], int size)
{
for (int i = 0; i < size; i++) {
	for (int j = 0; j < size; j++) {
	cout << a[i][j];
	}
	cout << endl;
}
}

// function to compute pattern
void printPatt(int n) {
	
// Pattern Size
int size = 2 * n - 1;
int front = 0;
int back = size - 1;
int a[max][max];
while (n != 0)
{
	for (int i = front; i <= back; i++) {
	for (int j = front; j <= back; j++) {
		if (i == front || i == back ||
			j == front || j == back)
		a[i][j] = n;
	}
	}
	++front;
	--back;
	--n;
}
print(a, size);
}






Total Strings
You are given a positive integer 'N'. Your task is to find the number of strings of length ‘N’ that can be formed using only the characters ‘a’, ‘b’ and ‘c’. The strings formed should be such that the number of ‘b’ and ‘c’ in the string is at most 1 and 2, respectively.
Example:
Let’s say N = 2. The strings of length 2, which satisfy the given constraints are: “aa”, “ab”, “ac”, “ba”, “bc”, “ca”, “cb”, “cc”. Hence, the output is 8.
Input Format:
The first line of input contains an integer ‘T’ representing the number of test cases.

The first and the only line of every test case contains a positive integer ‘N’ representing the length of strings to be found.
Output Format:
For each test case, the number of strings of length ‘N’ which satisfy the given constraints is printed.

Print the output of each test case in a separate line.
Note:
Since the number of possible strings can be very large, print the answer modulo 1000000007.

You do not need to print anything, it has already been taken care of. Just implement the given function.
Follow Up:
Can you solve the problem in constant time and using constant extra space i.e. O(1) time and space complexity?
Constraints:
1 <= T <= 100 
1 <= N <= 3000

Where 'T' denotes the number of test cases, 'N' denotes the length of strings. 

Time Limit: 1 sec
Sample Input 1:
2
2
3
Sample Output 1:
8
19
Explanation 1:
For the first test case, refer to the example explained before.

For the second test case, N = 3. The strings of length 3, which satisfy the given constraints are: “aaa”, “aab”, “aac”, “aba”, “abc”, “aca”, “acb”, “acc”, and so on. There are a total of 19 possible strings. 
Sample Input 2:
2
4
1
Sample Output 2:
39
3


/*
	Time complexity: O(1)
	Space Complexity: O(1)
*/

const int MOD = 1000000007;

int countStrings(int n)
{
    long long m = n;
    int temp = (m * (m * m - 1) / 2) % MOD;
    
    // Find the solution
    int ans = ((1 + 2 * m) % MOD + temp) % MOD;
    
    // Return the variable ans
    return ans;
}
