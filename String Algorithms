String Search
Send Feedback
You are given an string S and a test string T. You have to find whether string S is a substring of the string T.
Input Format:
First line of input will contain an integer T, representing the number of test cases
Each test case is as follows:
Line 1: contains the string S.
Line 2: contains the string T.
Constraints:
1 <= T <= 100
1 <= |S|, |T| <= 10^5
Output Format:
For each test case print "Yes" if S is present in T or "No" otherwise.
Sample Input 1:
2
ye
wnpnzijdi
ao
jaoalc
Sample Output 1:
No
Yes

// C++ implementation of the approach

#include <bits/stdc++.h>
using namespace std;
int isSubstring(string s1, string s2) {
  if (s2.find(s1) != string::npos)
    return s2.find(s1);
  return -1;
}

int main() {
    int t;
    cin>>t;
    while (t--) {
      string s = "";
      string t = "";
      cin>>s>>t;

      int res = isSubstring(s, t);
      if (res == -1)
        cout << "No";
      else
        cout << "Yes";

      cout<<endl;  
    }
  return 0;
}



Palindromic Substrings
Send Feedback
Given a string S, count and return the number of substrings of S that are a palindrome.
Single length substrings are also palindromes. You just need to print the count of palindromic substrings, not the actual substrings.
Input Format:
First line of input contains an integer T, representing the number of test cases.
Next T lines contain the string S
Constraints :
1 <= Length of S <= 2000
Output Format :
For each test case, print the count of palindrome substrings in a new line.
Sample Input 1:
1
aba
Sample Output 1:
4
Explanation:
The 4 palindrome substrings are "a", "b", "a" and "aba".

#include <bits/stdc++.h>
using namespace std;

// we'll use longest substring approach here
// we'll add 1 substring for each single element palindrome as well
int countPalindromeSubstrings(char s[]) {
  int len = 0;
  for (int i = 0; s[i] != '\0'; i++) {
    len++;
  }
  int l, r;
  int count = 0;

  for (int i = 0; i < len; i++) {
    // for odd length palindromes
    l = i;
    r = i;
    while (l >= 0 && r < len && s[l] == s[r]) {
      count++;
      l--;
      r++;
    }
    // for even length palindromes
    l = i;
    r = i + 1;
    while (l >= 0 && r < len && s[l] == s[r]) {
      count++;
      l--;
      r++;
    }
  }
  return count;
}

int main() {
    int t;
    cin>>t;
    while(t--)
    {
  char input[10000];
  cin >> input;
  cout << countPalindromeSubstrings(input) << endl;
}
return 0;
}





Longest Palindromic Substring
Send Feedback
You are given a string S .You have to find the length of the longest palindromic substring of S.
Input Format:
First line of input contains the string S.
Constraints:
1 <= |S| <= 4*10^6
Output Format:
You have to print the length of longest palindromic substring
Sample Input 1:
zkpbhxkmauuamkxsyi
Sample Output 1:
10
Explanation:
In the given sample test case, the longest palindromic substring is: xkmauuamkx.

#include<bits/stdc++.h>
using namespace std;

int getlps(string s){
    int maxlen=0;
    int len=s.length();

    for(int i=0;i<len;i++){
        int l,r;

        // find for odd length
        l=i;
        r=i;
        int lenodd=0;
        while(l>=0&&r<len&&s[l]==s[r]){
            lenodd=r-l+1;
            if(lenodd>maxlen){
                maxlen=lenodd;
            }
            l--;
            r++;
        }

        // find for even length
        l=i;
        r=i+1;
        int leneven=0;
        while(l>=0&&r<len&&s[l]==s[r]){
            leneven=r-l+1;
            if(leneven>maxlen){
                maxlen=leneven;
            }
            l--;
            r++;
        }

    }
    return maxlen;
}

int main(){
    string s ="";
    cin>>s;
    int len_lps=getlps(s);
    cout<<len_lps<<"\n";
    
    // len_lps=getlps("abababece");
    // cout<<len_lps<<"\n";

    // len_lps=getlps("ababbabcba");
    // cout<<len_lps<<"\n";

    return 0;
}





Red Scrabble
Send Feedback
Raymond “Red” Reddington is an international criminal hunted by the police forces of many countries. Recently, a joint Task Force, with the sole purpose of capturing Reddington, is launched, led by Agent Donald Ressler.
Red has managed to elude all the forces because he is always one step ahead. Before Ressler can catch him, Red manages to capture Ressler for interrogation.
Red is a huge fan of the game scrabble, and has created many modified versions of the game. He will let Ressler go, if he is able to solve one such version of the game.
The premise is quite simple. Ressler is given a string S which contains only digits. He needs to count the number of substrings of S, which are palindromes. There are some additional rules to be followed. Red explains them as follows -
Ressler needs to count the number of substrings of S, which are palindromes without leading zeros and can be divided by 3 without a remainder.
A string is a palindrome without leading zeros if it reads the same backward as forward and doesn't start with the symbol '0'.
Ressler should consider string "0" as a palindrome without leading zeros.
You need to help Agent Ressler.
Input Format:
The first and only line of input contains string S.
Constraints:
1 <= |S| <= 10^5
0 <= S[i] <= 9
Output Format:
Print the answer obtained.
Sample Input 1:
10686
Sample Output 1:
3
Explanation:
The three palindromic substrings are: 0, 6, 6.


#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;

void init() {
  cin.tie(0);
  cin.sync_with_stdio(0);
  cout.tie(0);
  cout.sync_with_stdio(0);
}

const int N = 5e6 + 5;
int pr[N], cnt[N][3], p[N];

void manacher(string s) {
  int n = s.length();
  int l = 0, r = -1;
  for (int i = 0; i < n; i++) {
    int k = i > r ? 0 : min(p[l + r - i], r - i);
    while (0 <= i - k && i + k < n && s[i - k] == s[i + k])
      k++;
    p[i] = --k;
    if (i + k > r) {
      l = i - k;
      r = i + k;
    }
  }
}

int t(char c) {
  if (c == '#')
    return 0;
  return (c - '0') % 3;
}

int main() {
  init();
  string x;
  cin >> x;
  string s(2 * x.size() + 1, '#');
  for (int i = 0; i < x.size(); i++) {
    s[2 * i + 1] = x[i];
  }
  manacher(s);
  pr[0] = t(s[0]);
  for (int i = 1; i < s.size(); ++i) {
    pr[i] = pr[i - 1] + t(s[i]);
    pr[i] %= 3;
    // cout << s[i]<<" "<<pr[i]<<"\n";
    for (int j = 0; j < 3; ++j) {
      cnt[i][j] = cnt[i - 1][j];
    }
    if (s[i] != '#' && s[i] != '0')
      cnt[i][pr[i]]++;
  }
  long long ans = 0;
  for (int i = 1; i < s.size() - 1; ++i) {

    int l = p[i];
    int j = i + l - 1;
    if (!t(s[i]) && s[i] != '#')
      ans++;
    /*  cout << pr[i] << " " << t(s[i]) % 3 << " " << " " << s[i] << " " << i <<
       " " << j << " " << cnt[i][(pr[i] + t(s[i])) % 3] << " " << cnt[j][(pr[i]
       + t(s[i])) % 3]
           << " " << (pr[i] + t(s[i])) % 3
           << "\n";*/
    ans += (cnt[j][(pr[i] + t(s[i])) % 3] - cnt[i][(pr[i] + t(s[i])) % 3]);
  }
  cout << ans;
}










Ready Player S?
Send Feedback
OASIS is a virtual reality created by the legendary James Halliday. After Halliday's death, a pre-recorded message left by him announced a game, which would grant the ownership and control of the OASIS to the first player who finds the Golden Easter Egg within it.
Shivali, an OASIS player, is obsessed with the game and finding the Easter Egg. But she has to fight the IOI clan, who wants to control OASIS for evil purposes. Both of them gather troops of different types and form a big army to fight each other.
IOI has N troops of lowercase letters forming a huge army. Shivali has an army of length M.
She will win, if the first k troops she takes from her army, can kill any of the k consecutive troops of the IOI army.
Remember a troop of type 'a' can only kill a troop of type 'a'.
You have to find how many times she can win.
Input Format:
The first line of input contains N, M and k, space separated.
Next two lines contains the string of troops of length N and M respectively in lowercase letters.
Constraints:
1 <= N, M <= 10^6
1 <= K <= M
Output Format:
Output the number of wins she is going to take at the end of the day. Print -1 if she can't win.
Sample Input 1:
3 2 1
bbb
bb
Sample Output 1:
3

#include <bits/stdc++.h>
using namespace std;
#define boost                                                                  \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define int long long
const int mod = 1e9 + 7;
const int inf = 1e18;
vector<int> z_function(string s) {
  int n = (int)s.size();
  vector<int> z(n);
  for (int i = 1, l = 0, r = 0; i < n; i++) {
    if (i <= r) {
      z[i] = min(r - i + 1, z[i - l]);
    }
    while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {
      ++z[i];
    }
    if (i + z[i] - 1 > r) {
      l = i, r = i + z[i] - 1;
    }
  }
  return z;
}
int32_t main() {
  boost int t = 1;
  // cin >> t;
  while (t--) {
    int n, m, k;
    cin >> n >> m >> k;
    string s1, s2;
    cin >> s1 >> s2;
    string s3 = s2.substr(0, k);
    string s = s3 + "$" + s1;
    vector<int> z = z_function(s);
    int ans = 0;
    for (int i = 1; i < z.size(); i++) {
      if (z[i] == k)
        ans++;
    }
    if (ans == 0)
      cout << "-1" << endl;
    else
      cout << ans << endl;
  }
  return 0;
}





Red Riding Hood's Adventure
Send Feedback
Little Red Riding Hood has to go to her grandmother’s house. Her grandmother is very sick. To reach her house, Red Riding Hood has to cross a very long dark forest. She is also carrying a basket full of food for her journey. The forest was much longer than anticipated, and Riding Hood decided to take rest. She finds a cave and lights a campfire inside it to keep herself warm for the night. But alas! The campfire attracts the Big Bad Wolf.
Luckily the Big Bad Wolf has recently turned vegetarian, and will not eat Red Riding Hood. He takes all the food that she was carrying instead, but decided to keep her as a minion. She cries a lot and begs the wolf to let her go. Big Bad Wolf used to be a problem solver in the past, and decides to let her go if and only if she is able to solve a problem for him. He gives the Red Riding Hood a long sentence “X” and a small word “W” . She has to find how many times word “W” occurs as a substring of “X” (spaces in the sentence are not to be considered). Red Riding Hood is just a kid, you have to help her solve the problem and escape the Big Bad Wolf.
Input Format :
First line of input will contain T(number of test cases). Each test case follows.
Line 1: contains the sentence X
Line 2: contains the string W
Constraints:
1 <= T <= 100
1 <= |S| ,|s| <= 10^5 
Output Format:
For each test case print the answer in a new line.
Sample Input 1:
4
axb ycz d
abc
ab  cab cabc abc
abc
aab acbaa bbaaz
aab
aaaaaa
aa
Sample Output 1:
0
4
2
5

#include <bits/stdc++.h>
using namespace std;
void lps(string patt, int lps[], int m) {
  lps[0] = 0;
  int i = 1, len = 0;
  while (i < m) {
    if (patt[i] == patt[len]) {
      len++;
      lps[i] = len;
      i++;
    } else {
      if (len != 0) {
        len = lps[len - 1];
      } else {
        lps[i] = 0;
        i++;
      }
    }
  }
  return;
}

int KMP(string text, string patt) {
  int n = text.size();
  int m = patt.size();
  int Lps[m];
  memset(Lps, 0, sizeof Lps);
  lps(patt, Lps, m);
  int i = 0, j = 0, ans = 0;
  while (i < n) {
    if (text[i] == patt[j]) {
      i++;
      j++;
    }
    if (j == m)

    {
      ans++;
      j = Lps[j - 1];
    } else if (i < n && text[i] == ' ') {
      i++;
    } else if (i < n && text[i] != patt[j]) {
      if (j != 0) {
        j = Lps[j - 1];
      } else {
        i++;
      }
    }
  }
  return ans;
}

int main() {
  int t;
  cin >> t;
  string text, patt;
  getline(cin, text);
  while (t--) {
    getline(cin, text);
    cin >> patt;
    cout << KMP(text, patt) << endl;
    getline(cin, text);
  }
}
