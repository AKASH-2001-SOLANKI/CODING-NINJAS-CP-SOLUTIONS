Calculate Grundy Number
Send Feedback
Calculate the Grundy Number for the given 'n' in the game.
The game starts with a number- ‘n’ and the player to move divides the number- ‘n’ with 2, 3 or 6 and then takes the floor. If the integer becomes 0, it is removed. The last player to move wins. Which player wins the game?
Input Format:
First line of input contains an integer T, representing the number of test cases.
Next T lines contain an integer n.
Constraints:
1 <= T <= 10^4
1 <= N <= 10^6
Output Format:
Print the Grundy Number(n) for each test case in a new line.
Sample Input 1:
1
10
Sample Output 1:
0

#include <bits/stdc++.h>
using namespace std;

const int N = (int) 1e6+5;

int dp[N];

int getGrundy(int n) {
	if(n == 0) return 0;
    
    if(dp[n] != -1) return dp[n];
    
	int a = getGrundy(n/2);
	int b = getGrundy(n/3);
	int c = getGrundy(n/6);
    
	int x=0;
	while(x == a || x == b || x == c) {
        ++x;
	}
    return dp[n] = x;
}

int main(int argc, char const *argv[])
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    
    memset(dp , -1, sizeof(dp));
    
    int t; cin >> t;
    while(t--)
    {
        int n;
        cin >> n;
        cout << getGrundy(n) << endl;
    }
	return 0;
}



Optimal Move in Tic Tac Toe
Send Feedback
Given a state of 3*3 Tic Tac Toe Board and two players 'x' and 'o', find the best optimal move possible for player with the next turn, specifying their row and column.
Consider yourself to be 'x' and computer to be 'o'.
Note: If there are more than one ways for 'x' to win the game from the given board state, the optimal move is the one where we have to make lesser number of moves to win the game.
Input Format:
First line of input contains integer N, representing the number of given states of board.
Next N lines contain row number, column number and player name('x' or 'o'), space separated.
Output Format:
The first line of output contains the ultimate result of the game as follows:
"Player_name" Wins. If no one wins, print Draw 
The second line of output contains 
(Total number of moves left) row: (Row Number) col: (Column Number)
Sample Input 1:
4
0 0 x
0 1 o
0 2 x
1 1 o
Sample Output 1:
Draw
5 row: 2 col: 1
Sample Input 2:
4
0 0 o
2 0 x
2 2 o
2 1 x
Sample Output 2:
o Wins
1 row: 1 col: 1

#include <algorithm>
#include <iostream>

using namespace std;

struct Move {
  int row, col;
};

char player = 'x', opponent = 'o';
bool isMovesLeft(char board[3][3]) {
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++)
      if (board[i][j] == '_')
        return true;
  return false;
}

int evaluate(char b[3][3]) {
  for (int row = 0; row < 3; row++) {
    if (b[row][0] == b[row][1] && b[row][1] == b[row][2]) {
      if (b[row][0] == player)
        return +10;
      else if (b[row][0] == opponent)
        return -10;
    }
  }

  for (int col = 0; col < 3; col++) {
    if (b[0][col] == b[1][col] && b[1][col] == b[2][col]) {
      if (b[0][col] == player)
        return +10;

      else if (b[0][col] == opponent)
        return -10;
    }
  }

  if (b[0][0] == b[1][1] && b[1][1] == b[2][2]) {
    if (b[0][0] == player)
      return +10;
    else if (b[0][0] == opponent)
      return -10;
  }

  if (b[0][2] == b[1][1] && b[1][1] == b[2][0]) {
    if (b[0][2] == player)
      return +10;
    else if (b[0][2] == opponent)
      return -10;
  }

  return 0;
}

int minimax(char board[3][3], int depth, bool isMax) {
  int score = evaluate(board);
  if (score == 10)
    return score;
  if (score == -10)
    return score;
  if (isMovesLeft(board) == false)
    return 0;

  if (isMax) {
    int best = -1000;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {

        if (board[i][j] == '_') {

          board[i][j] = player;
          best = max(best, minimax(board, depth + 1, !isMax));

          board[i][j] = '_';
        }
      }
    }
    return best;
  }

  else {
    int best = 1000;

    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {

        if (board[i][j] == '_') {
          board[i][j] = opponent;
          best = min(best, minimax(board, depth + 1, !isMax));
          board[i][j] = '_';
        }
      }
    }
    return best;
  }
}

Move findBestMove(char board[3][3]) {
  int bestVal = -1000;
  Move bestMove;
  bestMove.row = -1;
  bestMove.col = -1;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {

      if (board[i][j] == '_') {
        board[i][j] = player;
        int moveVal = minimax(board, 0, false);
        board[i][j] = '_';
        if (moveVal > bestVal) {
          bestMove.row = i;
          bestMove.col = j;
          bestVal = moveVal;
        }
      }
    }
  }

  cout << bestVal << " ";

  return bestMove;
}

// Driver code
int main() {
  char board[3][3];
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      board[i][j] = '_';
    }
  }
  int n;
  cin >> n;
  while (n--) {
    int row, column;
    char player;
    cin >> row >> column >> player;
    board[row][column] = player;
  }
  Move best_move = findBestMove(board);
  cout << "row: " << best_move.row << " "
       << "col: " << best_move.col << endl;
}





Single Row Checkers
Send Feedback
Yash is a huge fan of the game Chinese Checkers. He plays the game all the time. So much so, that he has come up with an interesting variant. Instead of the entire board, the game will be played only on one row containing multiple cells. He challenges his friend Aman to a match in his new variant. In Yash’s variant, a cell may contain the character “A” (for Aman), “B” (for Yash) or be empty. Each character can be moved from cell i to cell j if and only if all the cells between ith and jth cell are empty. The first character(leftmost) can only be moved to the right, the second character can only be moved to left, the next to the right, and so on and so forth. Each character can be moved any number of times, including zero.
Both Aman and Yash will have alternate turns. Since Yash is very confident, he gives first chance to his friend Aman. On each turn, the current player must choose a cell containing their own character and move it to a different cell. This cell can be chosen randomly, as long as both the players follow the above said rules. The first player who cannot move a character, loses.
Since each character is moved in a fixed direction, the game is finite.
Yash and Aman will always make the most optimal move. Determine who wins.
Input Format:
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first and only line of each test case contains a single string s describing the initial state of the row of cells. Each character of s is either 'A', 'B' or '.', denoting a cell containing 'A', a cell containing 'B' or an empty cell respectively.
Output Format:
For each test case, print a single line containing the string "A" if player A wins or "B" if player B wins.
Constraints:
1 <= T <= 100
1 <= |s| <= 10^4
Sample Input 1:
2
..B
A.B
Sample Output 1:
B
A
Explanation:
For first test case: In the first test case, since A doesn't have a character and therefore, cannot move. Hence, A loses and B wins.
For the second test case: A moves the first character to right. Now, B cannot move and loses.

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define double long double

char checkMate(const string &s) {
  const int n = s.size();

  string ans = "AB";
  vector<int> c(2);
  vector<char> dir(n, '#');

  int current = 0;

  for (int i = 0; i < n; ++i) {
    if (s[i] != '.') {
      dir[i] = (current == 0 ? 'R' : 'L');
      current ^= 1;
    }
  }

  int pre = -1, ok = 0, grundy = 0;

  for (int i = 0; i < n; ++i) {
    if (s[i] != '.') {
      if (pre == -1) {
        pre = i;
        continue;
      }
      if (dir[i] == 'L' && dir[pre] == 'R') {
        int dots = i - pre - 1;
        if (s[i] == s[pre]) {
          c[s[i] - 'A'] += dots;
        } else {
          if (dots > 0)
            ok = 1;
          grundy ^= dots;
        }
      }
      pre = i;
    }
  }

  if (dir[pre] == 'R') {
    c[s[pre] - 'A'] += (n - pre - 1);
  }

  if (c[0] == c[1])
    return ans[grundy == 0];
  return ans[c[0] < c[1]];
}

int32_t main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int t;
  cin >> t;
  while (t--) {
    string s;
    cin >> s;
    cout << checkMate(s) << '\n';
  }
  return 0;
}


