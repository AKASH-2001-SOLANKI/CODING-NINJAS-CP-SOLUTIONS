Number Of Balanced BTs
Send Feedback
You are given an integer h, find and print the count of all possible balanced binary trees of height h.
This number can be huge, so return the output modulus 10^9 + 7.
Input Format :
The first line of input contains an integer, that denotes the value of the number of test cases. Let us denote it with the symbol T.
Each test case consists of a single integer h, that denotes height of the binary tree, in a separate line.
Output Format :
For each test case, there is a single line of output, which prints the count of all possible balanced binary trees of height h, modulus 10^9 + 7. The output for each test case is printed in a separate line.
Constraints :
1 <= T <= 10
1 <= h <= 20
Time Limit: 1 second
Sample Input 1:
1
2
Sample Output 1:
3    
Explanation:
Following are the three balanced binary trees, that can be formed with height = 2.
Alt Text

Sample Input 2:
2
3
4
Sample Output 2:
15
315

/*
You are given an integer h, find and print the count of all possible balanced binary trees of height h.
This number can be huge, so return the output modulus 10^9 + 7.
Input Format :
The first line of input contains an integer, that denotes the value of the number of test cases. Let us denote it with the symbol T.
Each test case consists of a single integer h, that denotes height of the binary tree, in a separate line.
Output Format :
For each test case, there is a single line of output, which prints the count of all possible balanced binary trees of height h, modulus 10^9 + 7. The output for each test case is printed in a separate line.
Constraints :
1 <= T <= 10
1 <= h <= 20
Time Limit: 1 second
Sample Input 1:
1
2
Sample Output 1:
3    
Explanation:
Following are the three balanced binary trees, that can be formed with height = 2.
Alt Text

Sample Input 2:
2
3
4
Sample Output 2:
15
315
*/

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define double long double

const int MOD = (int) 1e9+7;

int memo(int n) {
	if(n <= 1) return 1;

	int x = memo(n-1);
	int y = memo(n-2);

	return ((x * x) % MOD + (2LL * x * y) % MOD) % MOD;
}

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	int t; cin >> t;
	while(t--)
	{
		int n; cin >> n;

		cout << memo(n) << '\n';
	}
	return 0;
}



Product of first N natural numbers
Send Feedback
You are given an integer N and you have to calculate the product of the first N natural numbers.
As the answer will be large, print the answer modulo 10^9+7.
Input Format :
The first line of input contains an integer, that denotes the value of the number of test cases. Let us denote it with the symbol T.
Each test case consists of a single integer N in a separate line.
Output Format :
For each test case, print the product of the first N natural numbers modulus 10^9 + 7 in a separate line.
Constraints :
1 <= T <= 100
1 <= N <= 10^5
Time Limit: 1 second
Sample Input 1:
2
3
4
Sample output 1:
6
24

/*
You are given an integer N and you have to calculate the product of the first N natural numbers.
As the answer will be large, print the answer modulo 10^9+7.
Input Format :
The first line of input contains an integer, that denotes the value of the number of test cases. Let us denote it with the symbol T.
Each test case consists of a single integer N in a separate line.
Output Format :
For each test case, print the product of the first N natural numbers modulus 10^9 + 7 in a separate line.
Constraints :
1 <= T <= 100
1 <= N <= 10^5
Time Limit: 1 second
Sample Input 1:
2
3
4
Sample output 1:
6
24
*/

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define double long double

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	const int MOD = (int) 1e9+7;

	int t; cin >> t;
	while(t--)
	{
		int n; cin >> n;

		int ans = 1;
		for(int i = 1 ; i <= n ; ++i) {
			ans = (ans * i) % MOD;
		}
		cout << ans << '\n';
	}
	return 0;
}



Power Function
Send Feedback
You are given two integers, X and Y. You have to compute X^Y.
Example:
2^3 evaluates to 8.
Since the result can be large, so calculate the X^Y % M, where M is 10^9 + 7.
Note: Apply the brute force method to solve the problem.
Input Format:
The first line of input contains an integer, that denotes the value of the number of test cases. Let us denote it with the symbol T.
Each test case consists of two space separated integers, that denote the value of X and Y. Each test case is given in a separate line.
Output Format:
For each test case, print the answer modulo 10^9 + 7 in a separate line.
Constraints:
1 <= T <= 50
0 <= X, Y <= 10^5
Time Limit: 1 second
Sample Input 1:
2
2 3
3 2
Sample Output 1:
8
9

/*
You are given two integers, X and Y. You have to compute X^Y.
Example:
2^3 evaluates to 8.
Since the result can be large, so calculate the X^Y % M, where M is 10^9 + 7.
Note: Apply the brute force method to solve the problem.
Input Format:
The first line of input contains an integer, that denotes the value of the number of test cases. Let us denote it with the symbol T.
Each test case consists of two space separated integers, that denote the value of X and Y. Each test case is given in a separate line.
Output Format:
For each test case, print the answer modulo 10^9 + 7 in a separate line.
Constraints:
1 <= T <= 50
1 <= X, Y <= 10^5
Time Limit: 1 second
Sample Input 1:
2
2 3
3 2
Sample Output 1:
8
9
*/

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define double long double

const int MOD = (int) 1e9+7;

int powerFunction(int base, int power) {
	if(power == 0) {
		return 1;
	}
	if(base <= 0) {
		return base;
	}

	int ans = powerFunction(base, power / 2);
	int value = (ans * ans) % MOD;

	if(power % 2 == 1) {
		value = (value * base) % MOD;
	}
	return value;
}

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	int t; cin >> t;
	while(t--)
	{
		int base, power;
		cin >> base >> power;

		cout << powerFunction(base, power) << '\n';
	}
	return 0;
}




